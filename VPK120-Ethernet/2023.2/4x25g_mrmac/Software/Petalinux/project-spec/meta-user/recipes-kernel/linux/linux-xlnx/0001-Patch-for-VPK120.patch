From b0045f6ed40f92bb76a2646f12e272677fc3699e Mon Sep 17 00:00:00 2001
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h  |  905 ++++++++-
 .../net/ethernet/xilinx/xilinx_axienet_main.c | 1639 ++++++++++++++++-
 2 files changed, 2433 insertions(+), 111 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index dc6ac79d55ca..fdf2c2b907e3 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -354,6 +354,7 @@
 #define XAE_IP_TCP_CSUM_VALIDATED	0x00000002
 
 #define DELAY_OF_ONE_MILLISEC		1000
+#define DELAY_OF_ONE_SECOND		1000000
 
 /* Xilinx PCS/PMA PHY register for switching 1000BaseX or SGMII */
 #define XLNX_MII_STD_SELECT_REG		0x11
@@ -533,22 +534,860 @@
 #define XAE_MAX_PKT_LEN		8192
 
 /* MRMAC Register Definitions */
-/* Configuration Registers */
-#define MRMAC_REV_OFFSET		0x00000000
-#define MRMAC_RESET_OFFSET		0x00000004
-#define MRMAC_MODE_OFFSET		0x00000008
-#define MRMAC_CONFIG_TX_OFFSET		0x0000000C
-#define MRMAC_CONFIG_RX_OFFSET		0x00000010
-#define MRMAC_TICK_OFFSET		0x0000002C
-#define MRMAC_CFG1588_OFFSET	0x00000040
-
-/* Status Registers */
-#define MRMAC_TX_STS_OFFSET		0x00000740
-#define MRMAC_RX_STS_OFFSET		0x00000744
-#define MRMAC_TX_RT_STS_OFFSET		0x00000748
-#define MRMAC_RX_RT_STS_OFFSET		0x0000074C
-#define MRMAC_STATRX_BLKLCK_OFFSET	0x00000754
-#define MRMAC_STATRX_VALID_CTRL_OFFSET	0x000007B8
+/* Configuration Registers - lane 0 */
+#define MRMAC_CONFIGURATION_REVISION_REG_0_OFFSET 0x00000000
+#define MRMAC_RESET_REG_0_OFFSET 0x00000004
+#define MRMAC_MODE_REG_0_OFFSET 0x00000008
+#define MRMAC_CONFIGURATION_TX_REG1_0_OFFSET 0x0000000C
+#define MRMAC_CONFIGURATION_RX_REG1_0_OFFSET 0x00000010
+#define MRMAC_CONFIGURATION_RX_MTU_0_OFFSET 0x00000014
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG1_0_OFFSET 0x00000018
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG2_0_OFFSET 0x00000020
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG3_0_OFFSET 0x00000024
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG4_0_OFFSET 0x00000028
+#define MRMAC_TICK_REG_0_OFFSET 0x0000002C
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_0_LSB_OFFSET 0x00000030
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_0_MSB_OFFSET 0x00000034
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_0_LSB_OFFSET 0x00000038
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_0_MSB_OFFSET 0x0000003C
+#define MRMAC_CONFIGURATION_1588_REG_0_OFFSET 0x00000040
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_0_OFFSET 0x0000004C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_0_OFFSET 0x00000050
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG3_0_OFFSET 0x00000054
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG4_0_OFFSET 0x00000058
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG5_0_OFFSET 0x0000005C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG1_0_OFFSET  0x00000060
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG2_0_OFFSET  0x00000064
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG3_0_OFFSET  0x00000068
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG4_0_OFFSET 0x0000006C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG5_0_OFFSET 0x00000070
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_ETYPE_OP_REG_0_OFFSET 0x00000074
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_ETYPE_OP_REG_0_OFFSET 0x00000078
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_LSB_0_OFFSET 0x0000007C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_MSB_0_OFFSET 0x00000080
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_LSB_0_OFFSET 0x00000084
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_MSB_0_OFFSET 0x00000088
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_LSB_0_OFFSET 0x0000008C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_MSB_0_OFFSET 0x00000090
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_LSB_0_OFFSET 0x00000094
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_MSB_0_OFFSET 0x00000098
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG1_0_OFFSET 0x0000009C
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG2_0_OFFSET 0x000000A0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PPP_ETYPE_OP_REG_0_OFFSET 0x000000A4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GPP_ETYPE_OP_REG_0_OFFSET 0x000000A8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_PCP_TYPE_REG_0_OFFSET 0x000000AC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PCP_OP_REG_0_OFFSET 0x000000B0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_OP_REG_0_OFFSET 0x000000B4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_0_LSB_OFFSET 0x000000B8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_0_MSB_OFFSET 0x000000BC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_0_LSB_OFFSET 0x000000C0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_0_MSB_OFFSET 0x000000C4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_0_LSB_OFFSET 0x000000C8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_0_MSB_OFFSET 0x000000CC
+#define MRMAC_FEC_MRMAC_CONFIGURATION_REG1_0_OFFSET 0x000000D0
+#define MRMAC_FEC_MRMAC_CONFIGURATION_REG2_0_OFFSET 0x000000D4
+#define MRMAC_FEC_MRMAC_CONFIGURATION_REG3_0_OFFSET 0x000000D8
+#define MRMAC_EMA_MRMAC_CONFIGURATION_REG1_0_OFFSET 0x000000E4
+#define MRMAC_CONFIGURATION_TX_AXI_FIFO_0_OFFSET 0x000000E8
+#define MRMAC_USER_REG_0_OFFSET 0x000000EC
+#define MRMAC_TEST_REG_0_OFFSET 0x000000F0
+#define MRMAC_CONFIGURATIONVL_MARKER_ID0_0_LSB_OFFSET 0x00000100
+#define MRMAC_CONFIGURATIONVL_MARKER_ID0_0_MSB_OFFSET 0x00000104
+#define MRMAC_CONFIGURATIONVL_MARKER_ID1_0_LSB_OFFSET 0x00000108
+#define MRMAC_CONFIGURATIONVL_MARKER_ID1_0_MSB_OFFSET 0x0000010C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID2_0_LSB_OFFSET 0x00000110
+#define MRMAC_CONFIGURATIONVL_MARKER_ID2_0_MSB_OFFSET 0x00000114
+#define MRMAC_CONFIGURATIONVL_MARKER_ID3_0_LSB_OFFSET 0x00000118
+#define MRMAC_CONFIGURATIONVL_MARKER_ID3_0_MSB_OFFSET 0x0000011C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID4_0_LSB_OFFSET 0x00000120
+#define MRMAC_CONFIGURATIONVL_MARKER_ID4_0_MSB_OFFSET 0x00000124
+#define MRMAC_CONFIGURATIONVL_MARKER_ID5_0_LSB_OFFSET 0x00000128
+#define MRMAC_CONFIGURATIONVL_MARKER_ID5_0_MSB_OFFSET 0x0000012C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID6_0_LSB_OFFSET 0x00000130
+#define MRMAC_CONFIGURATIONVL_MARKER_ID6_0_MSB_OFFSET 0x00000134
+#define MRMAC_CONFIGURATIONVL_MARKER_ID7_0_LSB_OFFSET 0x00000138
+#define MRMAC_CONFIGURATIONVL_MARKER_ID7_0_MSB_OFFSET 0x0000013C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID8_0_LSB_OFFSET 0x00000140
+#define MRMAC_CONFIGURATIONVL_MARKER_ID8_0_MSB_OFFSET 0x00000144
+#define MRMAC_CONFIGURATIONVL_MARKER_ID9_0_LSB_OFFSET 0x00000148
+#define MRMAC_CONFIGURATIONVL_MARKER_ID9_0_MSB_OFFSET 0x0000014C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID10_0_LSB_OFFSET 0x00000150
+#define MRMAC_CONFIGURATIONVL_MARKER_ID10_0_MSB_OFFSET 0x00000154
+#define MRMAC_CONFIGURATIONVL_MARKER_ID11_0_LSB_OFFSET 0x00000158
+#define MRMAC_CONFIGURATIONVL_MARKER_ID11_0_MSB_OFFSET 0x0000015C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID12_0_LSB_OFFSET 0x00000160
+#define MRMAC_CONFIGURATIONVL_MARKER_ID12_0_MSB_OFFSET 0x00000164
+#define MRMAC_CONFIGURATIONVL_MARKER_ID13_0_LSB_OFFSET 0x00000168
+#define MRMAC_CONFIGURATIONVL_MARKER_ID13_0_MSB_OFFSET 0x0000016C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID14_0_LSB_OFFSET 0x00000170
+#define MRMAC_CONFIGURATIONVL_MARKER_ID14_0_MSB_OFFSET 0x00000174
+#define MRMAC_CONFIGURATIONVL_MARKER_ID15_0_LSB_OFFSET 0x00000178
+#define MRMAC_CONFIGURATIONVL_MARKER_ID15_0_MSB_OFFSET 0x0000017C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID16_0_LSB_OFFSET 0x00000180
+#define MRMAC_CONFIGURATIONVL_MARKER_ID16_0_MSB_OFFSET 0x00000184
+#define MRMAC_CONFIGURATIONVL_MARKER_ID17_0_LSB_OFFSET 0x00000188
+#define MRMAC_CONFIGURATIONVL_MARKER_ID17_0_MSB_OFFSET 0x0000018C
+#define MRMAC_CONFIGURATIONVL_MARKER_ID18_0_LSB_OFFSET 0x00000190
+#define MRMAC_CONFIGURATIONVL_MARKER_ID18_0_MSB_OFFSET 0x00000194
+#define MRMAC_CONFIGURATIONVL_MARKER_ID19_0_LSB_OFFSET 0x00000198
+#define MRMAC_CONFIGURATIONVL_MARKER_ID19_0_MSB_OFFSET 0x0000019C
+#define MRMAC_CONFIGURATIONEMPTY0_0_OFFSET 0x00000220
+#define MRMAC_CONFIGURATIONEMPTY1_0_OFFSET 0x00000224
+#define MRMAC_CONFIGURATIONEMPTY2_0_OFFSET 0x00000228
+#define MRMAC_CONFIGURATIONEMPTY3_0_OFFSET 0x0000022C
+#define MRMAC_CONFIGURATIONEMPTY4_0_OFFSET 0x00000230
+#define MRMAC_CONFIGURATIONEMPTY5_0_OFFSET 0x00000234
+#define MRMAC_CONFIGURATIONEMPTY6_0_OFFSET 0x00000238
+#define MRMAC_CONFIGURATIONEMPTY7_0_OFFSET 0x0000023C
+#define MRMAC_CONFIGURATIONEMPTY8_0_OFFSET 0x00000240
+#define MRMAC_CONFIGURATIONEMPTY9_0_OFFSET 0x00000244
+#define MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_0_OFFSET 0x0000024C
+#define MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_0_OFFSET 0x00000250
+#define MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_0_OFFSET 0x00000254
+#define MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_0_OFFSET 0x0000025C
+#define MRMAC_CONFIGURATION_RX_1588_TIMESTAMP_CONFIG_0_OFFSET 0x00000260
+#define MRMAC_CONFIGURATION_RX_1588_OFFSET_TABLE_CONFIG_0_OFFSET 0x00000264
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_0_LSB_OFFSET 0x00000268
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_0_MSB_OFFSET 0x0000026C
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_0_LSB_OFFSET 0x00000270
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_0_MSB_OFFSET 0x00000274
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_0_LSB_OFFSET 0x00000278
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_0_MSB_OFFSET 0x0000027C
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_0_LSB_OFFSET 0x00000280
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_0_MSB_OFFSET 0x00000284
+
+/* Configuration Registers - lane 1 */
+#define MRMAC_RESET_REG_1_OFFSET 0x00000004
+#define MRMAC_MODE_REG_1_OFFSET 0x00000008
+#define MRMAC_CONFIGURATION_TX_REG1_1_OFFSET 0x0000000C
+#define MRMAC_CONFIGURATION_RX_REG1_1_OFFSET 0x00000010
+#define MRMAC_CONFIGURATION_RX_MTU_1_OFFSET 0x00000014
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG1_1_OFFSET 0x00000018
+#define MRMAC_TICK_REG_1_OFFSET 0x0000002C
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_1_LSB_OFFSET 0x00000030
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_1_MSB_OFFSET 0x00000034
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_1_LSB_OFFSET 0x00000038
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_1_MSB_OFFSET 0x0000003C
+#define MRMAC_CONFIGURATION_1588_REG_1_OFFSET 0x00000040
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_1_OFFSET 0x0000004C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_1_OFFSET 0x00000050
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG3_1_OFFSET 0x00000054
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG4_1_OFFSET 0x00000058
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG5_1_OFFSET 0x0000005C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG1_1_OFFSET 0x00000060
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG2_1_OFFSET 0x00000064
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG3_1_OFFSET 0x00000068
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG4_1_OFFSET 0x0000006C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG5_1_OFFSET 0x00000070
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_ETYPE_OP_REG_1_OFFSET 0x00000074
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_ETYPE_OP_REG_1_OFFSET 0x00000078
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_1_OFFSET_LSB_OFFSET 0x0000007C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_1_OFFSET_MSB_OFFSET 0x00000080
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_1_OFFSET_LSB_OFFSET 0x00000084
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_1_OFFSET_MSB_OFFSET 0x00000088
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_1_OFFSET_LSB_OFFSET 0x0000008C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_1_OFFSET_MSB_OFFSET 0x00000090
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_1_OFFSET_LSB_OFFSET 0x00000094
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_1_OFFSET_MSB_OFFSET 0x00000098
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG1_1_OFFSET 0x0000009C
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG2_1_OFFSET 0x000000A0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PPP_ETYPE_OP_REG_1_OFFSET 0x000000A4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GPP_ETYPE_OP_REG_1_OFFSET 0x000000A8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_PCP_TYPE_REG_1_OFFSET 0x000000AC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PCP_OP_REG_1_OFFSET 0x000000B0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_OP_REG_1_OFFSET 0x000000B4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_1_LSB_OFFSET 0x000000B8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_1_MSB_OFFSET 0x000000BC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_1_LSB_OFFSET 0x000000C0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_1_MSB_OFFSET 0x000000C4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_1_LSB_OFFSET 0x000000C8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_1_MSB_OFFSET 0x000000CC
+#define MRMAC_FEC_CONFIGURATION_REG1_1_OFFSET 0x000000D0
+#define MRMAC_CONFIGURATION_TX_AXI_FIFO_1_OFFSET 0x000000E8
+#define MRMAC_USER_REG_1_OFFSET 0x000000EC
+#define MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_1_OFFSET 0x0000024C
+#define MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_1_OFFSET 0x00000250
+#define MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_1_OFFSET 0x00000254
+#define MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_1_OFFSET 0x0000025C
+#define MRMAC_CONFIGURATION_RX_1588_TIMESTAMP_CONFIG_1_OFFSET 0x00000260
+#define MRMAC_CONFIGURATION_RX_1588_OFFSET_TABLE_CONFIG_1_OFFSET 0x00000264
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_1_LSB_OFFSET 0x00000268
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_1_MSB_OFFSET 0x0000026C
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_1_LSB_OFFSET 0x00000270
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_1_MSB_OFFSET 0x00000274
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_1_LSB_OFFSET 0x00000278
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_1_MSB_OFFSET 0x0000027C
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_1_LSB_OFFSET 0x00000280
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_1_MSB_OFFSET 0x00000284
+
+/* Configuration Registers - lane 2 */
+#define MRMAC_RESET_REG_2 0x00000004
+#define MRMAC_MODE_REG_2 0x00000008
+#define MRMAC_CONFIGURATION_TX_REG1_2 0x0000000C
+#define MRMAC_CONFIGURATION_RX_REG1_2 0x00000010
+#define MRMAC_CONFIGURATION_RX_MTU_2 0x00000014
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG1_2 0x00000018
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG2_2 0x00000020
+#define MRMAC_TICK_REG_2 0x0000002C
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_2_LSB 0x00000030
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_2_MSB 0x00000034
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_2_LSB 0x00000038
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_2_MSB 0x0000003C
+#define MRMAC_CONFIGURATION_1588_REG_2 0x00000040
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_2 0x0000004C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_2 0x00000050
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG3_2 0x00000054
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG4_2 0x00000058
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG5_2 0x0000005C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG1_2 0x00000060
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG2_2 0x00000064
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG3_2 0x00000068
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG4_2 0x0000006C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG5_2 0x00000070
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_ETYPE_OP_REG_2 0x00000074
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_ETYPE_OP_REG_2 0x00000078
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_2_LSB 0x0000007C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_2_MSB 0x00000080
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_2_LSB 0x00000084
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_2_MSB 0x00000088
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_2_LSB 0x0000008C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_2_MSB 0x00000090 
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_2_LSB 0x00000094
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_2_MSB 0x00000098
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG1_2 0x0000009C
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG2_2 0x000000A0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PPP_ETYPE_OP_REG_2 0x000000A4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GPP_ETYPE_OP_REG_2 0x000000A8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_PCP_TYPE_REG_2 0x000000AC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PCP_OP_REG_2 0x000000B0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_OP_REG_2 0x000000B4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_2_LSB 0x000000B8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_2_MSB 0x000000BC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_2_LSB 0x000000C0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_2_MSB 0x000000C4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_2_LSB 0x000000C8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_2_MSB 0x000000CC
+#define MRMAC_FEC_CONFIGURATION_REG1_2 0x000000D0
+#define MRMAC_FEC_CONFIGURATION_REG4_2 0x000000DC
+#define MRMAC_FEC_CONFIGURATION_REG5_2 0x000000E0
+#define MRMAC_CONFIGURATION_TX_AXI_FIFO_2 0x000000E8
+#define MRMAC_USER_REG_2 0x000000EC
+#define MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_2 0x0000024C
+#define MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_2 0x00000250
+#define MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_2 0x00000254
+#define MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_2 0x0000025C
+#define MRMAC_CONFIGURATION_RX_1588_TIMESTAMP_CONFIG_2 0x00000260 
+#define MRMAC_CONFIGURATION_RX_1588_OFFSET_TABLE_CONFIG_2 0x00000264
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_2_LSB 0x00000268
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_2_MSB 0x0000026C
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_2_LSB 0x00000270
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_2_MSB 0x00000274
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_2_LSB 0x00000278
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_2_MSB 0x0000027C
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_2_LSB 0x00000280
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_2_MSB 0x00000284
+
+/* Configuration Registers - lane 3 */
+#define MRMAC_RESET_REG_3 0x00000004
+#define MRMA_MODE_REG_3 0x00000008
+#define MRMAC_CONFIGURATION_TX_REG1_3 0x0000000C
+#define MRMAC_CONFIGURATION_RX_REG1_3 0x00000010
+#define MRMAC_CONFIGURATION_RX_MTU_3 0x00000014
+#define MRMAC_CONFIGURATION_VL_LENGTH_REG1_3 0x00000018
+#define MRMAC_TICK_REG_3 0x0000002C
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_3_LSB 0x00000030
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_3_MSB 0x00000034
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_3_LSB 0x00000038
+#define MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_3_MSB 0x0000003C
+#define MRMAC_CONFIGURATION_1588_REG_3 0x00000040
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_3 0x0000004C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_3 0x00000050
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG3_3 0x00000054
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG4_3 0x00000058
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG5_3 0x0000005C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG1_3 0x00000060
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG2_3 0x00000064
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG3_3 0x00000068
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG4_3 0x0000006C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_QUANTA_REG5_3 0x00000070
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_ETYPE_OP_REG_3 0x00000074
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_ETYPE_OP_REG_3 0x00000078
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_3_LSB 0x0000007C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_DA_REG_3_MSB 0x00000080
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_3_LSB 0x00000084
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_GPP_SA_REG_3_MSB 0x00000088
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_3_LSB 0x0000008C
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_DA_REG_3_MSB 0x00000090
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_3_LSB 0x00000094
+#define MRMAC_CONFIGURATION_TX_FLOW_CONTROL_PPP_SA_REG_3_MSB 0x00000098
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG1_3 0x0000009C
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_REG2_3 0x000000A0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PPP_ETYPE_OP_REG_3 0x000000A4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GPP_ETYPE_OP_REG_3 0x000000A8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_PCP_TYPE_REG_3 0x000000AC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_PCP_OP_REG_3 0x000000B0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_GCP_OP_REG_3 0x000000B4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_3_LSB 0x000000B8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG1_3_MSB 0x000000BC
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_3_LSB 0x000000C0
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_DA_REG2_3_MSB 0x000000C4
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_3_LSB 0x000000C8
+#define MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_3_MSB 0x000000CC
+#define MRMAC_FEC_CONFIGURATION_REG1_3 0x000000D0
+#define MRMAC_CONFIGURATION_TX_AXI_FIFO_3 0x000000E8
+#define MRMAC_USER_REG_3 0x000000EC
+#define MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_3 0x0000024C
+#define MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_3 0x00000250
+#define MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_3 0x00000254
+#define MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_3 0x0000025C
+#define MRMAC_CONFIGURATION_RX_1588_TIMESTAMP_CONFIG_3 0x00000260
+#define MRMAC_CONFIGURATION_RX_1588_OFFSET_TABLE_CONFIG_3 0x00000264
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_3_LSB 0x00000268
+#define MRMAC_MONITOR_TX_1588_SAMPLE_SYSTIMER_3_MSB 0x0000026C
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_3_LSB 0x00000270
+#define MRMAC_MONITOR_TX_1588_INCR_SYSTIMER_3_MSB 0x00000274
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_3_LSB 0x00000278
+#define MRMAC_MONITOR_RX_1588_SAMPLE_SYSTIMER_3_MSB 0x0000027C
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_3_LSB 0x00000280
+#define MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_3_MSB 0x00000284
+
+/* Status Registers - lane 0 */
+#define MRMAC_STAT_TX_STATUS_REG1_0_OFFSET	0x00000740
+#define MRMAC_STAT_RX_STATUS_REG1_0_OFFSET 	0x00000744
+#define MRMAC_STAT_TX_RT_STATUS_REG1_0_OFFSET  	0x00000748
+#define MRMAC_STAT_RX_RT_STATUS_REG1_0_OFFSET	0x0000074C
+#define MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET	0x00000754
+#define MRMAC_STAT_RX_LANE_SYNC_REG_0_OFFSET	0x00000758
+#define MRMAC_STAT_RX_LANE_SYNC_ERR_REG_0_OFFSET 0x0000075C
+#define MRMAC_STAT_RX_AM_ERR_REG_0_OFFSET	0x00000760
+#define MRMAC_STAT_RX_AM_LEN_ERR_REG_0_OFFSET	0x00000764
+#define MRMAC_STAT_RX_AM_REPEAT_ERR_REG_0_OFFSET 0x00000768
+#define MRMAC_STAT_RX_LANE_DEMUXED_0_OFFSET	0x0000076C
+#define MRMAC_STAT_RX_PCS_LANE_NUM_REG1_0_OFFSET 0x00000770
+#define MRMAC_STAT_RX_PCS_LANE_NUM_REG2_0_OFFSET 0x00000774
+#define MRMAC_STAT_RX_PCS_LANE_NUM_REG3_0_OFFSET 0x00000778
+#define MRMAC_STAT_RX_PCS_LANE_NUM_REG4_0_OFFSET 0x0000077C
+#define MRMAC_STAT_RX_BIP_OVERRIDE_REG_0_OFFSET 0x00000780
+#define MRMAC_STAT_RX_FEC_STATUS_REG_0_OFFSET	0x00000784
+#define MRMAC_STAT_RX_FEC_RT_STATUS_REG_0_OFFSET 0x00000788
+#define MRMAC_STAT_RX_FEC_MAP_REG1_0_OFFSET	0x0000078C
+#define MRMAC_STAT_RX_FEC_LANE_FILL_REG_0_OFFSET 0x00000790
+#define MRMAC_STAT_RX_FEC_LANE_FILL_REG1_0_OFFSET 0x00000794
+#define MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET	0x00000798
+#define MRMAC_STAT_TX_FEC_RT_STATUS_REG_0_OFFSET 0x0000079C
+#define MRMAC_STAT_TX_FLOW_CONTROL_REG1_0_OFFSET 0x000007A0
+#define MRMAC_STAT_RX_FLOW_CONTROL_REG1_0_OFFSET 0x000007A4
+#define MRMAC_STAT_TX_1588_TOD_0_LSB_OFFSET	0x000007A8
+#define MRMAC_STAT_TX_1588_TOD_0_MSB_OFFSET	0x000007AC
+#define MRMAC_STAT_RX_1588_TOD_0_LSB_OFFSET	0x000007B0
+#define MRMAC_STAT_RX_1588_TOD_0_MSB_OFFSET	0x000007B4
+#define MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET	0x000007B8
+#define MRMAC_STAT_RX_BIT_SLIP_0_OFFSET		0x000007BC
+#define MRMAC_STAT_RX_BIT_SLIP1_0_OFFSET	0x000007C0
+#define MRMAC_STAT_RX_BIT_SLIP2_0_OFFSET	0x000007C4
+#define MRMAC_STAT_RX_BIT_SLIP3_0_OFFSET	0x000007C8
+#define MRMAC_STAT_RX_BIT_SLIP4_0_OFFSET	0x000007CC
+#define MRMAC_STAT_TX_ECC_ERROR_0_OFFSET	0x000007D0
+#define MRMAC_STAT_RX_ECC_ERROR_0_OFFSET	0x000007D4
+#define MRMAC_STAT_STATISTICS_READY_0_OFFSET	0x000007D8
+
+/* Status Registers - lane 1 */
+#define MRMAC_STAT_TX_STATUS_REG1_1_OFFSET	0x00000740
+#define MRMAC_STAT_RX_STATUS_REG1_1_OFFSET	0x00000744
+#define MRMAC_STAT_TX_RT_STATUS_REG1_1_OFFSET	0x00000748
+#define MRMAC_STAT_RX_RT_STATUS_REG1_1_OFFSET	0x0000074C
+#define MRMAC_STAT_RX_BLOCK_LOCK_REG_1_OFFSET	0x00000754
+#define MRMAC_STAT_RX_FEC_STATUS_REG_1_OFFSET	0x00000784
+#define MRMAC_STAT_RX_FEC_RT_STATUS_REG_1_OFFSET 0x00000788
+#define MRMAC_STAT_RX_FEC_LANE_FILL_REG_1_OFFSET 0x00000790
+#define MRMAC_STAT_TX_FEC_STATUS_REG_1_OFFSET 	0x00000798
+#define MRMAC_STAT_TX_FEC_RT_STATUS_REG_1_OFFSET 0x0000079C
+#define MRMAC_STAT_TX_FLOW_CONTROL_REG1_1_OFFSET 0x000007A0
+#define MRMAC_STAT_RX_FLOW_CONTROL_REG1_1_OFFSET 0x000007A4
+#define MRMAC_STAT_TX_1588_TOD_1_LSB_OFFSET	 0x000007A8
+#define MRMAC_STAT_TX_1588_TOD_1_MSB_OFFSET	0x000007AC
+#define MRMAC_STAT_RX_1588_TOD_1_LSB_OFFSET	0x000007B0
+#define MRMAC_STAT_RX_1588_TOD_1_MSB_OFFSET	0x000007B4
+#define MRMAC_STAT_RX_VALID_CTRL_CODE_1_OFFSET	0x000007B8
+#define MRMAC_STAT_RX_BIT_SLIP_1_OFFSET		0x000007BC
+#define MRMAC_STAT_TX_ECC_ERROR_1_OFFSET	0x000007D0
+#define MRMAC_STAT_RX_ECC_ERROR_1_OFFSET	0x000007D4
+#define MRMAC_STAT_STATISTICS_READY_1_OFFSET	0x000007D8
+
+/* Status Registers - lane 2 */
+#define MRMAC_STAT_TX_STATUS_REG1_2_OFFSET	0x00000740
+#define MRMAC_STAT_RX_STATUS_REG1_2_OFFSET	0x00000744
+#define MRMAC_STAT_TX_RT_STATUS_REG1_2_OFFSET	0x00000748
+#define MRMAC_STAT_RX_RT_STATUS_REG1_2_OFFSET	0x0000074C
+#define MRMAC_STAT_RX_BLOCK_LOCK_REG_2_OFFSET	0x00000754
+#define MRMAC_STAT_RX_LANE_SYNC_REG_2_OFFSET	0x00000758
+#define MRMAC_STAT_RX_LANE_SYNC_ERR_REG_2_OFFSET 0x0000075C
+#define MRMAC_STAT_RX_AM_ERR_REG_2_OFFSET	0x00000760
+#define MRMAC_STAT_RX_AM_LEN_ERR_REG_2_OFFSET	0x00000764
+#define MRMAC_STAT_RX_AM_REPEAT_ERR_REG_2_OFFSET 0x00000768
+#define MRMAC_STAT_RX_LANE_DEMUXED_2_OFFSET	0x0000076C
+#define MRMAC_STAT_RX_PCS_LANE_NUM_REG1_2_OFFSET 0x00000770
+#define MRMAC_STAT_RX_BIP_OVERRIDE_REG_2_OFFSET	0x00000780
+#define MRMAC_STAT_RX_FEC_STATUS_REG_2_OFFSET	0x00000784
+#define MRMAC_STAT_RX_FEC_RT_STATUS_REG_2_OFFSET 0x00000788
+#define MRMAC_STAT_RX_FEC_MAP_REG1_2_OFFSET	0x0000078C
+#define MRMAC_STAT_RX_FEC_LANE_FILL_REG_2_OFFSET 0x00000790
+#define MRMAC_STAT_TX_FEC_STATUS_REG_2_OFFSET	0x00000798
+#define MRMAC_STAT_TX_FEC_RT_STATUS_REG_2_OFFSET 0x0000079C
+#define MRMAC_STAT_TX_FLOW_CONTROL_REG1_2_OFFSET 0x000007A0
+#define MRMAC_STAT_RX_FLOW_CONTROL_REG1_2_OFFSET 0x000007A4
+#define MRMAC_STAT_TX_1588_TOD_2_LSB_OFFSET	0x000007A8
+#define MRMAC_STAT_TX_1588_TOD_2_MSB_OFFSET	0x000007AC
+#define MRMAC_STAT_RX_1588_TOD_2_LSB_OFFSET	0x000007B0
+#define MRMAC_STAT_RX_1588_TOD_2_MSB_OFFSET	0x000007B4
+#define MRMAC_STAT_RX_VALID_CTRL_CODE_2_OFFSET	0x000007B8
+#define MRMAC_STAT_RX_BIT_SLIP_2_OFFSET		0x000007BC
+#define MRMAC_STAT_TX_ECC_ERROR_2_OFFSET	0x000007D0
+#define MRMAC_STAT_RX_ECC_ERROR_2_OFFSET	0x000007D4
+#define MRMAC_STAT_STATISTICS_READY_2_OFFSET	0x000007D8
+
+/* Status Registers - lane 3 */
+#define MRMAC_STAT_TX_STATUS_REG1_3		0x00000740
+#define MRMAC_STAT_RX_STATUS_REG1_3		0x00000744
+#define MRMAC_STAT_TX_RT_STATUS_REG1_3 		0x00000748
+#define MRMAC_STAT_RX_RT_STATUS_REG1_3 		0x0000074C
+#define MRMAC_STAT_RX_BLOCK_LOCK_REG_3 		0x00000754
+#define MRMAC_STAT_RX_FEC_STATUS_REG_3 		0x00000784
+#define MRMAC_STAT_RX_FEC_RT_STATUS_REG_3 	0x00000788
+#define MRMAC_STAT_RX_FEC_LANE_FILL_REG_3	0x00000790
+#define MRMAC_STAT_TX_FEC_STATUS_REG_3		0x00000798
+#define MRMAC_STAT_TX_FEC_RT_STATUS_REG_3	0x0000079C
+#define MRMAC_STAT_TX_FLOW_CONTROL_REG1_3	0x000007A0
+#define MRMAC_STAT_RX_FLOW_CONTROL_REG1_3	0x000007A4
+#define MRMAC_STAT_TX_1588_TOD_3_LSB		0x000007A8
+#define MRMAC_STAT_TX_1588_TOD_3_MSB		0x000007AC
+#define MRMAC_STAT_RX_1588_TOD_3_LSB		0x000007B0
+#define MRMAC_STAT_RX_1588_TOD_3_MSB		0x000007B4
+#define MRMAC_STAT_RX_VALID_CTRL_CODE_3		0x000007B8
+#define MRMAC_STAT_RX_BIT_SLIP_3		0x000007BC
+#define MRMAC_STAT_TX_ECC_ERROR_3		0x000007D0
+#define MRMAC_STAT_RX_ECC_ERROR_3		0x000007D4
+#define MRMAC_STAT_STATISTICS_READY_3		0x000007D8
+
+/* Histogram Counters - lane 0 */
+#define MRMAC_STAT_TX_CYCLE_COUNT_0_OFFSET		0x00000800
+#define MRMAC_STAT_TX_FRAME_ERROR_0_OFFSET		0x00000808
+#define MRMAC_STAT_TX_TOTAL_PACKETS_0_OFFSET 		0x00000818
+#define MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_0_OFFSET	0x00000820
+#define MRMAC_STAT_TX_TOTAL_BYTES_0_OFFSET		0x00000828
+#define MRMAC_STAT_TX_TOTAL_GOOD_BYTES_0_OFFSET		0x00000830
+#define MRMAC_STAT_TX_PACKET_64_BYTES_0_OFFSET		0x00000838
+#define MRMAC_STAT_TX_PACKET_65_127_BYTES_0_OFFSET	0x00000840
+#define MRMAC_STAT_TX_PACKET_128_255_BYTES_0_OFFSET	0x00000848
+#define MRMAC_STAT_TX_PACKET_256_511_BYTES_0_OFFSET	0x00000850
+#define MRMAC_STAT_TX_PACKET_512_1023_BYTES_0_OFFSET	0x00000858
+#define MRMAC_STAT_TX_PACKET_1024_1518_BYTES_0_OFFSET	0x00000860
+#define MRMAC_STAT_TX_PACKET_1519_1522_BYTES_0_OFFSET 	0x00000868
+#define MRMAC_STAT_TX_PACKET_1523_1548_BYTES_0_OFFSET	0x00000870
+#define MRMAC_STAT_TX_PACKET_1549_2047_BYTES_0_OFFSET	0x00000878
+#define MRMAC_STAT_TX_PACKET_2048_4095_BYTES_0_OFFSET	0x00000880
+#define MRMAC_STAT_TX_PACKET_4096_8191_BYTES_0_OFFSET	0x00000888
+#define MRMAC_STAT_TX_PACKET_8192_9215_BYTES_0_OFFSET	0x00000890
+#define MRMAC_STAT_TX_PACKET_LARGE_0_OFFSET		0x00000898
+#define MRMAC_STAT_TX_PACKET_SMALL_0_OFFSET		0x000008A0
+#define MRMAC_STAT_TX_BAD_FCS_0_OFFSET			0x000008D0
+#define MRMAC_STAT_TX_UNICAST_0_OFFSET			0x000008E8
+#define MRMAC_STAT_TX_MULTICAST_0_OFFSET		0x000008F0
+#define MRMAC_STAT_TX_BROADCAST_0_OFFSET		0x000008F8
+#define MRMAC_STAT_TX_VLAN_0_OFFSET			0x00000900
+#define MRMAC_STAT_TX_PAUSE_0_OFFSET			0x00000908
+#define MRMAC_STAT_TX_USER_PAUSE_0_OFFSET		0x00000910
+#define MRMAC_STAT_TX_TSN_PREEMPTED_PKT_0_OFFSET	0x00000920
+#define MRMAC_STAT_TX_TSN_FRAGMENT_0_OFFSET		0x00000928
+#define MRMAC_STAT_TX_PCS_BAD_CODE_0_OFFSET		0x00000930
+#define MRMAC_STAT_TX_CL82_49_CONVERT_ERR_0_OFFSET	0x00000938
+#define MRMAC_STAT_TX_ECC_ERR0_0_OFFSET			0x00000940
+#define MRMAC_STAT_TX_ECC_ERR1_0_OFFSET			0x00000948
+#define MRMAC_STAT_RX_CYCLE_COUNT_0_OFFSET		0x00000C00
+#define MRMAC_STAT_RX_BIP_ERR_0_0_OFFSET		0x00000C08
+#define MRMAC_STAT_RX_BIP_ERR_0_1_OFFSET		0x00000C10
+#define MRMAC_STAT_RX_BIP_ERR_0_2_OFFSET		0x00000C18
+#define MRMAC_STAT_RX_BIP_ERR_0_3_OFFSET		0x00000C20
+#define MRMAC_STAT_RX_BIP_ERR_0_4_OFFSET		0x00000C28
+#define MRMAC_STAT_RX_BIP_ERR_0_5_OFFSET		0x00000C30
+#define MRMAC_STAT_RX_BIP_ERR_0_6_OFFSET		0x00000C38
+#define MRMAC_STAT_RX_BIP_ERR_0_7_OFFSET		0x00000C40
+#define MRMAC_STAT_RX_BIP_ERR_0_8_OFFSET		0x00000C48
+#define MRMAC_STAT_RX_BIP_ERR_0_9_OFFSET		0x00000C50
+#define MRMAC_STAT_RX_BIP_ERR_0_10_OFFSET		0x00000C58
+#define MRMAC_STAT_RX_BIP_ERR_0_11_OFFSET		0x00000C60
+#define MRMAC_STAT_RX_BIP_ERR_0_12_OFFSET		0x00000C68
+#define MRMAC_STAT_RX_BIP_ERR_0_13_OFFSET		0x00000C70
+#define MRMAC_STAT_RX_BIP_ERR_0_14_OFFSET		0x00000C78
+#define MRMAC_STAT_RX_BIP_ERR_0_15_OFFSET		0x00000C80
+#define MRMAC_STAT_RX_BIP_ERR_0_16_OFFSET		0x00000C88
+#define MRMAC_STAT_RX_BIP_ERR_0_17_OFFSET		0x00000C90
+#define MRMAC_STAT_RX_BIP_ERR_0_18_OFFSET		0x00000C98
+#define MRMAC_STAT_RX_BIP_ERR_0_19_OFFSET		0x00000CA0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_0_OFFSET		0x00000CA8
+#define MRMAC_STAT_RX_FRAMING_ERR_0_1_OFFSET		0x00000CB0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_2_OFFSET		0x00000CB8
+#define MRMAC_STAT_RX_FRAMING_ERR_0_3_OFFSET		0x00000CC0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_4_OFFSET		0x00000CC8
+#define MRMAC_STAT_RX_FRAMING_ERR_0_5_OFFSET		0x00000CD0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_6_OFFSET 		0x00000CD0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_7_OFFSET		0x00000CE0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_8_OFFSET		0x00000CE8
+#define MRMAC_STAT_RX_FRAMING_ERR_0_9_OFFSET		0x00000CF0
+#define MRMAC_STAT_RX_FRAMING_ERR_0_10_OFFSET		0x00000CF8
+#define MRMAC_STAT_RX_FRAMING_ERR_0_11_OFFSET		0x00000D00
+#define MRMAC_STAT_RX_FRAMING_ERR_0_12_OFFSET		0x00000D08
+#define MRMAC_STAT_RX_FRAMING_ERR_0_13_OFFSET		0x00000D10
+#define MRMAC_STAT_RX_FRAMING_ERR_0_14_OFFSET		0x00000D18
+#define MRMAC_STAT_RX_FRAMING_ERR_0_15_OFFSET		0x00000D20
+#define MRMAC_STAT_RX_FRAMING_ERR_0_16_OFFSET		0x00000D28
+#define MRMAC_STAT_RX_FRAMING_ERR_0_17_OFFSET		0x00000D30
+#define MRMAC_STAT_RX_FRAMING_ERR_0_18_OFFSET		0x00000D38
+#define MRMAC_STAT_RX_FRAMING_ERR_0_19_OFFSET		0x00000D40
+#define MRMAC_STAT_RX_BAD_CODE_0_OFFSET			0x00000D58
+#define MRMAC_STAT_RX_PCS_BAD_CODE_0_OFFSET		0x00000D60
+#define MRMAC_STAT_RX_INVALID_START_0_OFFSET		0x00000D68
+#define MRMAC_STAT_RX_FEC_CW_0_0_OFFSET			0x00000D70
+#define MRMAC_STAT_RX_FEC_CW_0_1_OFFSET			0x00000D78
+#define MRMAC_STAT_RX_FEC_CW_0_2_OFFSET			0x00000D80
+#define MRMAC_STAT_RX_FEC_CW_0_3_OFFSET			0x00000D88
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_0_0_OFFSET	0x00000D90
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_0_1_OFFSET	0x00000D98
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_0_2_OFFSET	0x00000DA0
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_0_3_OFFSET	0x00000DA8
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_0_0_OFFSET	0x00000DB0
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_0_1_OFFSET	0x00000DB8
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_0_2_OFFSET	0x00000DC0
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_0_3_OFFSET	0x00000DC8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_0_0_OFFSET	0x00000DD0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_0_1_OFFSET	0x00000DD8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_0_2_OFFSET	0x00000DE0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_0_3_OFFSET	0x00000DE8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_0_0_OFFSET	0x00000DF0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_0_1_OFFSET	0x00000DF8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_0_2_OFFSET	0x00000E00
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_0_3_OFFSET	0x00000E08
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_0_0_OFFSET		0x00000E10
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_0_1_OFFSET		0x00000E18
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_0_2_OFFSET		0x00000E20
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_0_3_OFFSET		0x00000E28
+#define MRMAC_STAT_RX_TOTAL_PACKETS_0_OFFSET		0x00000E30
+#define MRMAC_STAT_RX_TOTAL_GOOD_PACKETS_0_OFFSET	0x00000E38
+#define MRMAC_STAT_RX_TOTAL_BYTES_0_OFFSET		0x00000E40
+#define MRMAC_STAT_RX_TOTAL_GOOD_BYTES_0_OFFSET		0x00000E48
+#define MRMAC_STAT_RX_PACKET_64_BYTES_0_OFFSET		0x00000E50
+#define MRMAC_STAT_RX_PACKET_65_127_BYTES_0_OFFSET	0x00000E58
+#define MRMAC_STAT_RX_PACKET_128_255_BYTES_0_OFFSET	0x00000E60
+#define MRMAC_STAT_RX_PACKET_256_511_BYTES_0_OFFSET	0x00000E68
+#define MRMAC_STAT_RX_PACKET_512_1023_BYTES_0_OFFSET	0x00000E70
+#define MRMAC_STAT_RX_PACKET_1024_1518_BYTES_0_OFFSET	0x00000E78
+#define MRMAC_STAT_RX_PACKET_1519_1522_BYTES_0_OFFSET	0x00000E80
+#define MRMAC_STAT_RX_PACKET_1523_1548_BYTES_0_OFFSET	0x00000E88
+#define MRMAC_STAT_RX_PACKET_1549_2047_BYTES_0_OFFSET	0x00000E90
+#define MRMAC_STAT_RX_PACKET_2048_4095_BYTES_0_OFFSET	0x00000E98
+#define MRMAC_STAT_RX_PACKET_4096_8191_BYTES_0_OFFSET	0x00000EA0
+#define MRMAC_STAT_RX_PACKET_8192_9215_BYTES_0_OFFSET	0x00000EA8
+#define MRMAC_STAT_RX_PACKET_LARGE_0_OFFSET		0x00000EB0
+#define MRMAC_STAT_RX_PACKET_SMALL_0_OFFSET		0x00000EB8
+#define MRMAC_STAT_RX_UNDERSIZE_0_OFFSET		0x00000EC0
+#define MRMAC_STAT_RX_FRAGMENT_0_OFFSET			0x00000EC8
+#define MRMAC_STAT_RX_OVERSIZE_0_OFFSET			0x00000ED0
+#define MRMAC_STAT_RX_TOOLONG_0_OFFSET			0x00000ED8
+#define MRMAC_STAT_RX_JABBER_0_OFFSET			0x00000EE0
+#define MRMAC_STAT_RX_BAD_FCS_0_OFFSET			0x00000EE8
+#define MRMAC_STAT_RX_PACKET_BAD_FCS_0_OFFSET		0x00000EF0
+#define MRMAC_STAT_RX_STOMPED_FCS_0_OFFSET		0x00000EF8
+#define MRMAC_STAT_RX_UNICAST_0_OFFSET			0x00000F00
+#define MRMAC_STAT_RX_MULTICAST_0_OFFSET		0x00000F08
+#define MRMAC_STAT_RX_BROADCAST_0_OFFSET		0x00000F10
+#define MRMAC_STAT_RX_VLAN_0_OFFSET			0x00000F18
+#define MRMAC_STAT_RX_PAUSE_0_OFFSET		 	0x00000F20
+#define MRMAC_STAT_RX_USER_PAUSE_0_OFFSET		0x00000F28
+#define MRMAC_STAT_RX_INRANGEERR_0_OFFSET		0x00000F30
+#define MRMAC_STAT_RX_TRUNCATED_0_OFFSET		0x00000F38
+#define MRMAC_STAT_RX_TEST_PATTERN_MISMATCH_0_OFFSET	0x00000F40
+#define MRMAC_STAT_RX_CL49_82_CONVERT_ERR_0_OFFSET	0x00000F48
+#define MRMAC_STAT_RX_TSN_PREEMPTED_PKT_0_OFFSET	0x00000F50
+#define MRMAC_STAT_RX_TSN_FRAGMENT_0_OFFSET		0x00000F58
+#define MRMAC_STAT_RX_ECC_ERR0_0_OFFSET			0x00000F60
+#define MRMAC_STAT_RX_ECC_ERR1_0_OFFSET			0x00000F68
+
+/* Histogram Counters - lane 1 */
+#define MRMAC_STAT_TX_CYCLE_COUNT_1_OFFSET		0x00000800
+#define MRMAC_STAT_TX_FRAME_ERROR_1_OFFSET		0x00000808
+#define MRMAC_STAT_TX_TOTAL_PACKETS_1_OFFSET 		0x00000818
+#define MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_1_OFFSET	0x00000820
+#define MRMAC_STAT_TX_TOTAL_BYTES_1_OFFSET		0x00000828
+#define MRMAC_STAT_TX_TOTAL_GOOD_BYTES_1_OFFSET		0x00000830
+#define MRMAC_STAT_TX_PACKET_64_BYTES_1_OFFSET		0x00000838
+#define MRMAC_STAT_TX_PACKET_65_127_BYTES_1_OFFSET	0x00000840
+#define MRMAC_STAT_TX_PACKET_128_255_BYTES_1_OFFSET	0x00000848
+#define MRMAC_STAT_TX_PACKET_256_511_BYTES_1_OFFSET	0x00000850
+#define MRMAC_STAT_TX_PACKET_512_1023_BYTES_1_OFFSET	0x00000858
+#define MRMAC_STAT_TX_PACKET_1024_1518_BYTES_1_OFFSET	0x00000860
+#define MRMAC_STAT_TX_PACKET_1519_1522_BYTES_1_OFFSET 	0x00000868
+#define MRMAC_STAT_TX_PACKET_1523_1548_BYTES_1_OFFSET	0x00000870
+#define MRMAC_STAT_TX_PACKET_1549_2047_BYTES_1_OFFSET	0x00000878
+#define MRMAC_STAT_TX_PACKET_2048_4095_BYTES_1_OFFSET	0x00000880
+#define MRMAC_STAT_TX_PACKET_4096_8191_BYTES_1_OFFSET	0x00000888
+#define MRMAC_STAT_TX_PACKET_8192_9215_BYTES_1_OFFSET	0x00000890
+#define MRMAC_STAT_TX_PACKET_LARGE_1_OFFSET		0x00000898
+#define MRMAC_STAT_TX_PACKET_SMALL_1_OFFSET		0x000008A0
+#define MRMAC_STAT_TX_BAD_FCS_1_OFFSET			0x000008D0
+#define MRMAC_STAT_TX_UNICAST_1_OFFSET			0x000008E8
+#define MRMAC_STAT_TX_MULTICAST_1_OFFSET		0x000008F0
+#define MRMAC_STAT_TX_BROADCAST_1_OFFSET		0x000008F8
+#define MRMAC_STAT_TX_VLAN_1_OFFSET			0x00000900
+#define MRMAC_STAT_TX_PAUSE_1_OFFSET			0x00000908
+#define MRMAC_STAT_TX_USER_PAUSE_1_OFFSET		0x00000910
+#define MRMAC_STAT_TX_TSN_PREEMPTED_PKT_1_OFFSET	0x00000920
+#define MRMAC_STAT_TX_TSN_FRAGMENT_1_OFFSET		0x00000928
+#define MRMAC_STAT_TX_PCS_BAD_CODE_1_OFFSET		0x00000930
+#define MRMAC_STAT_TX_CL82_49_CONVERT_ERR_1_OFFSET	0x00000938
+#define MRMAC_STAT_TX_ECC_ERR0_1_OFFSET			0x00000940
+#define MRMAC_STAT_TX_ECC_ERR1_1_OFFSET			0x00000948
+#define MRMAC_STAT_RX_CYCLE_COUNT_1_OFFSET		0x00000C00
+#define MRMAC_STAT_RX_FRAMING_ERR_1_OFFSET		0x00000D48
+#define MRMAC_STAT_RX_BAD_CODE_1_OFFSET			0x00000D58
+#define MRMAC_STAT_RX_PCS_BAD_CODE_1_OFFSET		0x00000D60
+#define MRMAC_STAT_RX_INVALID_START_1_OFFSET		0x00000D68
+#define MRMAC_STAT_RX_FEC_CW_1_OFFSET			0x00000D70
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_1_OFFSET		0x00000D90
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_1_OFFSET	0x00000DB0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_1_OFFSET		0x00000DD0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_1_OFFSET		0x00000DF0
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_1_OFFSET		0x00000E10
+#define MRMAC_STAT_RX_TOTAL_PACKETS_1_OFFSET		0x00000E30
+#define MRMAC_STAT_RX_TOTAL_GOOD_PACKETS_1_OFFSET	0x00000E38
+#define MRMAC_STAT_RX_TOTAL_BYTES_1_OFFSET		0x00000E40
+#define MRMAC_STAT_RX_TOTAL_GOOD_BYTES_1_OFFSET		0x00000E48
+#define MRMAC_STAT_RX_PACKET_64_BYTES_1_OFFSET		0x00000E50
+#define MRMAC_STAT_RX_PACKET_65_127_BYTES_1_OFFSET	0x00000E58
+#define MRMAC_STAT_RX_PACKET_128_255_BYTES_1_OFFSET	0x00000E60
+#define MRMAC_STAT_RX_PACKET_256_511_BYTES_1_OFFSET	0x00000E68
+#define MRMAC_STAT_RX_PACKET_512_1023_BYTES_1_OFFSET	0x00000E70
+#define MRMAC_STAT_RX_PACKET_1024_1518_BYTES_1_OFFSET	0x00000E78
+#define MRMAC_STAT_RX_PACKET_1519_1522_BYTES_1_OFFSET	0x00000E80
+#define MRMAC_STAT_RX_PACKET_1523_1548_BYTES_1_OFFSET	0x00000E88
+#define MRMAC_STAT_RX_PACKET_1549_2047_BYTES_1_OFFSET	0x00000E90
+#define MRMAC_STAT_RX_PACKET_2048_4095_BYTES_1_OFFSET	0x00000E98
+#define MRMAC_STAT_RX_PACKET_4096_8191_BYTES_1_OFFSET	0x00000EA0
+#define MRMAC_STAT_RX_PACKET_8192_9215_BYTES_1_OFFSET	0x00000EA8
+#define MRMAC_STAT_RX_PACKET_LARGE_1_OFFSET		0x00000EB0
+#define MRMAC_STAT_RX_PACKET_SMALL_1_OFFSET		0x00000EB8
+#define MRMAC_STAT_RX_UNDERSIZE_1_OFFSET		0x00000EC0
+#define MRMAC_STAT_RX_FRAGMENT_1_OFFSET			0x00000EC8
+#define MRMAC_STAT_RX_OVERSIZE_1_OFFSET			0x00000ED0
+#define MRMAC_STAT_RX_TOOLONG_1_OFFSET			0x00000ED8
+#define MRMAC_STAT_RX_JABBER_1_OFFSET			0x00000EE0
+#define MRMAC_STAT_RX_BAD_FCS_1_OFFSET			0x00000EE8
+#define MRMAC_STAT_RX_PACKET_BAD_FCS_1_OFFSET		0x00000EF0
+#define MRMAC_STAT_RX_STOMPED_FCS_1_OFFSET		0x00000EF8
+#define MRMAC_STAT_RX_UNICAST_1_OFFSET			0x00000F00
+#define MRMAC_STAT_RX_MULTICAST_1_OFFSET		0x00000F08
+#define MRMAC_STAT_RX_BROADCAST_1_OFFSET		0x00000F10
+#define MRMAC_STAT_RX_VLAN_1_OFFSET			0x00000F18
+#define MRMAC_STAT_RX_PAUSE_1_OFFSET		 	0x00000F20
+#define MRMAC_STAT_RX_USER_PAUSE_1_OFFSET		0x00000F28
+#define MRMAC_STAT_RX_INRANGEERR_1_OFFSET		0x00000F30
+#define MRMAC_STAT_RX_TRUNCATED_1_OFFSET		0x00000F38
+#define MRMAC_STAT_RX_TEST_PATTERN_MISMATCH_1_OFFSET	0x00000F40
+#define MRMAC_STAT_RX_CL49_82_CONVERT_ERR_1_OFFSET	0x00000F48
+#define MRMAC_STAT_RX_TSN_PREEMPTED_PKT_1_OFFSET	0x00000F50
+#define MRMAC_STAT_RX_TSN_FRAGMENT_1_OFFSET		0x00000F58
+#define MRMAC_STAT_RX_ECC_ERR0_1_OFFSET			0x00000F60
+#define MRMAC_STAT_RX_ECC_ERR1_1_OFFSET			0x00000F68
+
+/* Histogram Counters - lane 2 */
+#define MRMAC_STAT_TX_CYCLE_COUNT_2_OFFSET		0x00000800
+#define MRMAC_STAT_TX_FRAME_ERROR_2_OFFSET		0x00000808
+#define MRMAC_STAT_TX_TOTAL_PACKETS_2_OFFSET		0x00000818
+#define MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_2_OFFSET	0x00000820
+#define MRMAC_STAT_TX_TOTAL_BYTES_2_OFFSET		0x00000828
+#define MRMAC_STAT_TX_TOTAL_GOOD_BYTES_2_OFFSET		0x00000830
+#define MRMAC_STAT_TX_PACKET_64_BYTES_2_OFFSET		0x00000838
+#define MRMAC_STAT_TX_PACKET_65_127_BYTES_2_OFFSET	0x00000840
+#define MRMAC_STAT_TX_PACKET_128_255_BYTES_2_OFFSET	0x00000848
+#define MRMAC_STAT_TX_PACKET_256_511_BYTES_2_OFFSET	0x00000850
+#define MRMAC_STAT_TX_PACKET_512_1023_BYTES_2_OFFSET	0x00000858
+#define MRMAC_STAT_TX_PACKET_1024_1518_BYTES_2_OFFSET	0x00000860
+#define MRMAC_STAT_TX_PACKET_1519_1522_BYTES_2_OFFSET	0x00000868
+#define MRMAC_STAT_TX_PACKET_1523_1548_BYTES_2_OFFSET	0x00000870
+#define MRMAC_STAT_TX_PACKET_1549_2047_BYTES_2_OFFSET	0x00000878
+#define MRMAC_STAT_TX_PACKET_2048_4095_BYTES_2_OFFSET	0x00000880
+#define MRMAC_STAT_TX_PACKET_4096_8191_BYTES_2_OFFSET	0x00000888
+#define MRMAC_STAT_TX_PACKET_8192_9215_BYTES_2_OFFSET	0x00000890
+#define MRMAC_STAT_TX_PACKET_LARGE_2_OFFSET		0x00000898
+#define MRMAC_STAT_TX_PACKET_SMALL_2_OFFSET		0x000008A0
+#define MRMAC_STAT_TX_BAD_FCS_2_OFFSET			0x000008D0
+#define MRMAC_STAT_TX_UNICAST_2_OFFSET			0x000008E8
+#define MRMAC_STAT_TX_MULTICAST_2_OFFSET		0x000008F0
+#define MRMAC_STAT_TX_BROADCAST_2_OFFSET		0x000008F8
+#define MRMAC_STAT_TX_VLAN_2_OFFSET			0x00000900
+#define MRMAC_STAT_TX_PAUSE_2_OFFSET			0x00000908
+#define MRMAC_STAT_TX_USER_PAUSE_2_OFFSET		0x00000910
+#define MRMAC_STAT_TX_TSN_PREEMPTED_PKT_2_OFFSET	0x00000920
+#define MRMAC_STAT_TX_TSN_FRAGMENT_2_OFFSET		0x00000928
+#define MRMAC_STAT_TX_PCS_BAD_CODE_2_OFFSET		0x00000930
+#define MRMAC_STAT_TX_CL82_49_CONVERT_ERR_2_OFFSET	0x00000938
+#define MRMAC_STAT_TX_ECC_ERR0_2_OFFSET			0x00000940
+#define MRMAC_STAT_TX_ECC_ERR1_2_OFFSET			0x00000948
+#define MRMAC_STAT_RX_CYCLE_COUNT_2_OFFSET		0x00000C00
+#define MRMAC_STAT_RX_BIP_ERR_2_0_OFFSET		0x00000C08
+#define MRMAC_STAT_RX_BIP_ERR_2_1_OFFSET		0x00000C10
+#define MRMAC_STAT_RX_BIP_ERR_2_2_OFFSET		0x00000C18
+#define MRMAC_STAT_RX_BIP_ERR_2_3_OFFSET		0x00000C20
+#define MRMAC_STAT_RX_FRAMING_ERR_2_0_OFFSET		0x00000CA8
+#define MRMAC_STAT_RX_FRAMING_ERR_2_1_OFFSET		0x00000CB0
+#define MRMAC_STAT_RX_FRAMING_ERR_2_2_OFFSET		0x00000CB8
+#define MRMAC_STAT_RX_FRAMING_ERR_2_3_OFFSET		0x00000CC0
+#define MRMAC_STAT_RX_BAD_CODE_2_OFFSET			0x00000D58
+#define MRMAC_STAT_RX_PCS_BAD_CODE_2_OFFSET		0x00000D60
+#define MRMAC_STAT_RX_INVALID_START_2_OFFSET		0x00000D68
+#define MRMAC_STAT_RX_FEC_CW_2_0_OFFSET			0x00000D70
+#define MRMAC_STAT_RX_FEC_CW_2_1_OFFSET			0x00000D78
+#define MRMAC_STAT_RX_FEC_CW_2_2_OFFSET			0x00000D80
+#define MRMAC_STAT_RX_FEC_CW_2_3_OFFSET			0x00000D88
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_2_0_OFFSET	0x00000D90
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_2_1_OFFSET	0x00000D98
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_2_2_OFFSET	0x00000DA0
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_2_3_OFFSET	0x00000DA8
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_2_0_OFFSET	0x00000DB0
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_2_1_OFFSET	0x00000DB8
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_2_2_OFFSET	0x00000DC0
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_2_3_OFFSET	0x00000DC8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_2_0_OFFSET	0x00000DD0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_2_1_OFFSET	0x00000DD8
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_2_0_OFFSET	0x00000DF0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_2_1_OFFSET	0x00000DF8
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_2_0_OFFSET		0x00000E10
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_2_1_OFFSET		0x00000E18
+#define MRMAC_STAT_RX_TOTAL_PACKETS_2_OFFSET		0x00000E30
+#define MRMAC_STAT_RX_TOTAL_GOOD_PACKETS_2_OFFSET	0x00000E38
+#define MRMAC_STAT_RX_TOTAL_BYTES_2_OFFSET		0x00000E40
+#define MRMAC_STAT_RX_TOTAL_GOOD_BYTES_2_OFFSET		0x00000E48
+#define MRMAC_STAT_RX_PACKET_64_BYTES_2_OFFSET		0x00000E50
+#define MRMAC_STAT_RX_PACKET_65_127_BYTES_2_OFFSET	0x00000E58
+#define MRMAC_STAT_RX_PACKET_128_255_BYTES_2_OFFSET	0x00000E60
+#define MRMAC_STAT_RX_PACKET_256_511_BYTES_2_OFFSET	0x00000E68
+#define MRMAC_STAT_RX_PACKET_512_1023_BYTES_2_OFFSET	0x00000E70
+#define MRMAC_STAT_RX_PACKET_1024_1518_BYTES_2_OFFSET	0x00000E78
+#define MRMAC_STAT_RX_PACKET_1519_1522_BYTES_2_OFFSET	0x00000E80
+#define MRMAC_STAT_RX_PACKET_1523_1548_BYTES_2_OFFSET	0x00000E88
+#define MRMAC_STAT_RX_PACKET_1549_2047_BYTES_2_OFFSET	0x00000E90
+#define MRMAC_STAT_RX_PACKET_2048_4095_BYTES_2_OFFSET	0x00000E98
+#define MRMAC_STAT_RX_PACKET_4096_8191_BYTES_2_OFFSET	0x00000EA0
+#define MRMAC_STAT_RX_PACKET_8192_9215_BYTES_2_OFFSET	0x00000EA8
+#define MRMAC_STAT_RX_PACKET_LARGE_2_OFFSET		0x00000EB0
+#define MRMAC_STAT_RX_PACKET_SMALL_2_OFFSET		0x00000EB8
+#define MRMAC_STAT_RX_UNDERSIZE_2_OFFSET		0x00000EC0
+#define MRMAC_STAT_RX_FRAGMENT_2_OFFSET			0x00000EC8
+#define MRMAC_STAT_RX_OVERSIZE_2_OFFSET			0x00000ED0
+#define MRMAC_STAT_RX_TOOLONG_2_OFFSET			0x00000ED8
+#define MRMAC_STAT_RX_JABBER_2_OFFSET			0x00000EE0
+#define MRMAC_STAT_RX_BAD_FCS_2_OFFSET			0x00000EE8
+#define MRMAC_STAT_RX_PACKET_BAD_FCS_2_OFFSET		0x00000EF0
+#define MRMAC_STAT_RX_STOMPED_FCS_2_OFFSET		0x00000EF8
+#define MRMAC_STAT_RX_UNICAST_2_OFFSET			0x00000F00
+#define MRMAC_STAT_RX_MULTICAST_2_OFFSET		0x00000F08
+#define MRMAC_STAT_RX_BROADCAST_2_OFFSET		0x00000F10
+#define MRMAC_STAT_RX_VLAN_2_OFFSET			0x00000F18
+#define MRMAC_STAT_RX_PAUSE_2_OFFSET			0x00000F20
+#define MRMAC_STAT_RX_USER_PAUSE_2_OFFSET		0x00000F28
+#define MRMAC_STAT_RX_INRANGEERR_2_OFFSET		0x00000F30
+#define MRMAC_STAT_RX_TRUNCATED_2_OFFSET		0x00000F38
+#define MRMAC_STAT_RX_TEST_PATTERN_MISMATCH_2_OFFSET	0x00000F40
+#define MRMAC_STAT_RX_CL49_82_CONVERT_ERR_2_OFFSET	0x00000F48
+#define MRMAC_STAT_RX_TSN_PREEMPTED_PKT_2_OFFSET	0x00000F50
+#define MRMAC_STAT_RX_TSN_FRAGMENT_2_OFFSET		0x00000F58
+#define MRMAC_STAT_RX_ECC_ERR0_2_OFFSET			0x00000F60
+#define MRMAC_STAT_RX_ECC_ERR1_2_OFFSET			0x00000F68
+
+/* Histogram Counters - lane 3 */
+#define MRMAC_STAT_TX_CYCLE_COUNT_3_OFFSET		0x00000800
+#define MRMAC_STAT_TX_FRAME_ERROR_3_OFFSET		0x00000808
+#define MRMAC_STAT_TX_TOTAL_PACKETS_3_OFFSET 		0x00000818
+#define MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_3_OFFSET	0x00000820
+#define MRMAC_STAT_TX_TOTAL_BYTES_3_OFFSET		0x00000828
+#define MRMAC_STAT_TX_TOTAL_GOOD_BYTES_3_OFFSET		0x00000830
+#define MRMAC_STAT_TX_PACKET_64_BYTES_3_OFFSET		0x00000838
+#define MRMAC_STAT_TX_PACKET_65_127_BYTES_3_OFFSET	0x00000840
+#define MRMAC_STAT_TX_PACKET_128_255_BYTES_3_OFFSET	0x00000848
+#define MRMAC_STAT_TX_PACKET_256_511_BYTES_3_OFFSET	0x00000850
+#define MRMAC_STAT_TX_PACKET_512_1023_BYTES_3_OFFSET	0x00000858
+#define MRMAC_STAT_TX_PACKET_1024_1518_BYTES_3_OFFSET	0x00000860
+#define MRMAC_STAT_TX_PACKET_1519_1522_BYTES_3_OFFSET 	0x00000868
+#define MRMAC_STAT_TX_PACKET_1523_1548_BYTES_3_OFFSET	0x00000870
+#define MRMAC_STAT_TX_PACKET_1549_2047_BYTES_3_OFFSET	0x00000878
+#define MRMAC_STAT_TX_PACKET_2048_4095_BYTES_3_OFFSET	0x00000880
+#define MRMAC_STAT_TX_PACKET_4096_8191_BYTES_3_OFFSET	0x00000888
+#define MRMAC_STAT_TX_PACKET_8192_9215_BYTES_3_OFFSET	0x00000890
+#define MRMAC_STAT_TX_PACKET_LARGE_3_OFFSET		0x00000898
+#define MRMAC_STAT_TX_PACKET_SMALL_3_OFFSET		0x000008A0
+#define MRMAC_STAT_TX_BAD_FCS_3_OFFSET			0x000008D0
+#define MRMAC_STAT_TX_UNICAST_3_OFFSET			0x000008E8
+#define MRMAC_STAT_TX_MULTICAST_3_OFFSET		0x000008F0
+#define MRMAC_STAT_TX_BROADCAST_3_OFFSET		0x000008F8
+#define MRMAC_STAT_TX_VLAN_3_OFFSET			0x00000900
+#define MRMAC_STAT_TX_PAUSE_3_OFFSET			0x00000908
+#define MRMAC_STAT_TX_USER_PAUSE_3_OFFSET		0x00000910
+#define MRMAC_STAT_TX_TSN_PREEMPTED_PKT_3_OFFSET	0x00000920
+#define MRMAC_STAT_TX_TSN_FRAGMENT_3_OFFSET		0x00000928
+#define MRMAC_STAT_TX_PCS_BAD_CODE_3_OFFSET		0x00000930
+#define MRMAC_STAT_TX_CL82_49_CONVERT_ERR_3_OFFSET	0x00000938
+#define MRMAC_STAT_TX_ECC_ERR0_3_OFFSET			0x00000940
+#define MRMAC_STAT_TX_ECC_ERR1_3_OFFSET			0x00000948
+#define MRMAC_STAT_RX_CYCLE_COUNT_3_OFFSET		0x00000C00
+#define MRMAC_STAT_RX_FRAMING_ERR_3_OFFSET		0x00000D48
+#define MRMAC_STAT_RX_BAD_CODE_3_OFFSET			0x00000D58
+#define MRMAC_STAT_RX_PCS_BAD_CODE_3_OFFSET		0x00000D60
+#define MRMAC_STAT_RX_INVALID_START_3_OFFSET		0x00000D68
+#define MRMAC_STAT_RX_FEC_CW_3_OFFSET			0x00000D70
+#define MRMAC_STAT_RX_FEC_CORRECTED_CW_3_OFFSET		0x00000D90
+#define MRMAC_STAT_RX_FEC_UNCORRECTED_CW_3_OFFSET	0x00000DB0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_3_OFFSET		0x00000DD0
+#define MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_3_OFFSET		0x00000DF0
+#define MRMAC_STAT_RX_FEC_ERR_COUNT_3_OFFSET		0x00000E10
+#define MRMAC_STAT_RX_TOTAL_PACKETS_3_OFFSET		0x00000E30
+#define MRMAC_STAT_RX_TOTAL_GOOD_PACKETS_3_OFFSET	0x00000E38
+#define MRMAC_STAT_RX_TOTAL_BYTES_3_OFFSET		0x00000E40
+#define MRMAC_STAT_RX_TOTAL_GOOD_BYTES_3_OFFSET		0x00000E48
+#define MRMAC_STAT_RX_PACKET_64_BYTES_3_OFFSET		0x00000E50
+#define MRMAC_STAT_RX_PACKET_65_127_BYTES_3_OFFSET	0x00000E58
+#define MRMAC_STAT_RX_PACKET_128_255_BYTES_3_OFFSET	0x00000E60
+#define MRMAC_STAT_RX_PACKET_256_511_BYTES_3_OFFSET	0x00000E68
+#define MRMAC_STAT_RX_PACKET_512_1023_BYTES_3_OFFSET	0x00000E70
+#define MRMAC_STAT_RX_PACKET_1024_1518_BYTES_3_OFFSET	0x00000E78
+#define MRMAC_STAT_RX_PACKET_1519_1522_BYTES_3_OFFSET	0x00000E80
+#define MRMAC_STAT_RX_PACKET_1523_1548_BYTES_3_OFFSET	0x00000E88
+#define MRMAC_STAT_RX_PACKET_1549_2047_BYTES_3_OFFSET	0x00000E90
+#define MRMAC_STAT_RX_PACKET_2048_4095_BYTES_3_OFFSET	0x00000E98
+#define MRMAC_STAT_RX_PACKET_4096_8191_BYTES_3_OFFSET	0x00000EA0
+#define MRMAC_STAT_RX_PACKET_8192_9215_BYTES_3_OFFSET	0x00000EA8
+#define MRMAC_STAT_RX_PACKET_LARGE_3_OFFSET		0x00000EB0
+#define MRMAC_STAT_RX_PACKET_SMALL_3_OFFSET		0x00000EB8
+#define MRMAC_STAT_RX_UNDERSIZE_3_OFFSET		0x00000EC0
+#define MRMAC_STAT_RX_FRAGMENT_3_OFFSET			0x00000EC8
+#define MRMAC_STAT_RX_OVERSIZE_3_OFFSET			0x00000ED0
+#define MRMAC_STAT_RX_TOOLONG_3_OFFSET			0x00000ED8
+#define MRMAC_STAT_RX_JABBER_3_OFFSET			0x00000EE0
+#define MRMAC_STAT_RX_BAD_FCS_3_OFFSET			0x00000EE8
+#define MRMAC_STAT_RX_PACKET_BAD_FCS_3_OFFSET		0x00000EF0
+#define MRMAC_STAT_RX_STOMPED_FCS_3_OFFSET		0x00000EF8
+#define MRMAC_STAT_RX_UNICAST_3_OFFSET			0x00000F00
+#define MRMAC_STAT_RX_MULTICAST_3_OFFSET		0x00000F08
+#define MRMAC_STAT_RX_BROADCAST_3_OFFSET		0x00000F10
+#define MRMAC_STAT_RX_VLAN_3_OFFSET			0x00000F18
+#define MRMAC_STAT_RX_PAUSE_3_OFFSET		 	0x00000F20
+#define MRMAC_STAT_RX_USER_PAUSE_3_OFFSET		0x00000F28
+#define MRMAC_STAT_RX_INRANGEERR_3_OFFSET		0x00000F30
+#define MRMAC_STAT_RX_TRUNCATED_3_OFFSET		0x00000F38
+#define MRMAC_STAT_RX_TEST_PATTERN_MISMATCH_3_OFFSET	0x00000F40
+#define MRMAC_STAT_RX_CL49_82_CONVERT_ERR_3_OFFSET	0x00000F48
+#define MRMAC_STAT_RX_TSN_PREEMPTED_PKT_3_OFFSET	0x00000F50
+#define MRMAC_STAT_RX_TSN_FRAGMENT_3_OFFSET		0x00000F58
+#define MRMAC_STAT_RX_ECC_ERR0_3_OFFSET			0x00000F60
+#define MRMAC_STAT_RX_ECC_ERR1_3_OFFSET			0x00000F68
 
 /* Register bit masks */
 #define MRMAC_RX_SERDES_RST_MASK	(BIT(3) | BIT(2) | BIT(1) | BIT(0))
@@ -565,7 +1404,10 @@
 #define MRMAC_TX_EN_MASK		BIT(0)
 #define MRMAC_TX_INS_FCS_MASK		BIT(1)
 
-#define MRMAC_RX_BLKLCK_MASK		BIT(0)
+#define MRMAC_RX_BLKLCK_MASK_0		GENMASK(19,0)
+#define MRMAC_RX_BLKLCK_MASK_1		BIT(0)
+#define MRMAC_RX_BLKLCK_MASK_2		GENMASK(3,0)
+#define MRMAC_RX_BLKLCK_MASK_3		BIT(0)
 #define MRMAC_RX_STATUS_MASK		BIT(0)
 #define MRMAC_RX_VALID_MASK		BIT(0)
 
@@ -579,12 +1421,14 @@
 #define MRMAC_CTL_AXIS_CFG_MASK		GENMASK(11, 9)
 #define MRMAC_CTL_AXIS_CFG_SHIFT	9
 #define MRMAC_CTL_AXIS_CFG_10G_IND	1
-#define MRMAC_CTL_AXIS_CFG_25G_IND	1
+#define MRMAC_CTL_AXIS_CFG_25G_IND	5
+#define MRMAC_CTL_AXIS_CFG_100G_IND	5
 
 #define MRMAC_CTL_SERDES_WIDTH_MASK	GENMASK(6, 4)
 #define MRMAC_CTL_SERDES_WIDTH_SHIFT	4
 #define MRMAC_CTL_SERDES_WIDTH_10G	4
-#define MRMAC_CTL_SERDES_WIDTH_25G	6
+#define MRMAC_CTL_SERDES_WIDTH_25G	2
+#define MRMAC_CTL_SERDES_WIDTH_100G	2
 
 #define MRMAC_CTL_RATE_CFG_MASK		(MRMAC_CTL_DATA_RATE_MASK |	\
 					 MRMAC_CTL_AXIS_CFG_MASK |	\
@@ -607,6 +1451,7 @@
 #define MRMAC_GT_RST_TX_MASK		BIT(2)
 #define MRMAC_GT_10G_MASK		0x00000001
 #define MRMAC_GT_25G_MASK		0x00000002
+#define MRMAC_GT_100G_MASK		0x00000002
 
 #define MRMAC_GT_LANE_OFFSET		BIT(16)
 #define MRMAC_MAX_GT_LANES		4
@@ -1056,8 +1901,8 @@ static inline void axienet_iow(struct axienet_local *lp, off_t offset,
 
 static inline u32 axienet_get_mrmac_blocklock(struct axienet_local *lp)
 {
-	axienet_iow(lp, MRMAC_STATRX_BLKLCK_OFFSET, MRMAC_STS_ALL_MASK);
-	return axienet_ior(lp, MRMAC_STATRX_BLKLCK_OFFSET);
+	axienet_iow(lp, MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+	return axienet_ior(lp, MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET);
 }
 
 /**
@@ -1070,8 +1915,22 @@ static inline u32 axienet_get_mrmac_blocklock(struct axienet_local *lp)
 
 static inline u32 axienet_get_mrmac_rx_status(struct axienet_local *lp)
 {
-	axienet_iow(lp, MRMAC_RX_STS_OFFSET, MRMAC_STS_ALL_MASK);
-	return axienet_ior(lp, MRMAC_RX_STS_OFFSET);
+	axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+	return axienet_ior(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET);
+}
+
+/**
+ * axienet_get_mrmac_ctrl_code - Write to Clear MRMAC RX ctrl code register
+ * and read the latest status
+ * @lp:		Pointer to axienet local structure
+ *
+ * Return: The contents of the Contents of MRMAC RX ctrl code register
+ */
+
+static inline u32 axienet_get_mrmac_rx_ctrl_code(struct axienet_local *lp)
+{
+	axienet_iow(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET, MRMAC_STS_ALL_MASK);
+	return axienet_ior(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET);
 }
 
 #ifdef CONFIG_XILINX_AXI_EMAC_HWTSTAMP
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 256c4f050bce..408de7e681a8 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -48,6 +48,7 @@
 #include <linux/clk.h>
 #include <linux/ptp/ptp_xilinx.h>
 #include <linux/workqueue.h>
+#include <linux/kernel.h>
 
 #include "xilinx_axienet.h"
 
@@ -64,6 +65,7 @@
 #define DRIVER_VERSION		"1.00a"
 
 #define AXIENET_REGS_N		40
+#define MRMAC_AXIENET_REGS_N	512
 #define AXIENET_TS_HEADER_LEN	8
 #define XXVENET_TS_HEADER_LEN	4
 #define MRMAC_TS_HEADER_LEN	16
@@ -176,19 +178,19 @@ static struct xxvenet_option xxvenet_options[] = {
 static struct xxvenet_option mrmacenet_options[] = {
 	{ /* Turn on FCS stripping on receive packets */
 		.opt = XAE_OPTION_FCS_STRIP,
-		.reg = MRMAC_CONFIG_RX_OFFSET,
+		.reg = MRMAC_CONFIGURATION_RX_REG1_0_OFFSET,
 		.m_or = MRMAC_RX_DEL_FCS_MASK,
 	}, { /* Turn on FCS insertion on transmit packets */
 		.opt = XAE_OPTION_FCS_INSERT,
-		.reg = MRMAC_CONFIG_TX_OFFSET,
+		.reg = MRMAC_CONFIGURATION_TX_REG1_0_OFFSET,
 		.m_or = MRMAC_TX_INS_FCS_MASK,
 	}, { /* Enable transmitter */
 		.opt = XAE_OPTION_TXEN,
-		.reg = MRMAC_CONFIG_TX_OFFSET,
+		.reg = MRMAC_CONFIGURATION_TX_REG1_0_OFFSET,
 		.m_or = MRMAC_TX_EN_MASK,
 	}, { /* Enable receiver */
 		.opt = XAE_OPTION_RXEN,
-		.reg = MRMAC_CONFIG_RX_OFFSET,
+		.reg = MRMAC_CONFIGURATION_RX_REG1_0_OFFSET,
 		.m_or = MRMAC_RX_EN_MASK,
 	},
 	{}
@@ -207,6 +209,470 @@ static struct axienet_ethtools_stat axienet_get_ethtools_strings_stats[] = {
 	{ "rx_errors" },
 };
 
+static struct axienet_ethtools_stat
+	axienet_get_ethtools_mrmac_strings_stats_0[] = {
+
+		// lane 0
+	{"STAT_TX_CYCLE_COUNT"},
+	{"STAT_TX_FRAME_ERROR"},
+	{"STAT_TX_TOTAL_PACKETS"},
+	{"STAT_TX_TOTAL_GOOD_PACKETS"},
+	{"STAT_TX_TOTAL_BYTES"},
+	{"STAT_TX_TOTAL_GOOD_BYTES"},
+	{"STAT_TX_PACKET_64_BYTES"},
+	{"STAT_TX_PACKET_65_127_BYTES"},
+	{"STAT_TX_PACKET_128_255_BYTES"},
+	{"STAT_TX_PACKET_256_511_BYTES"},
+	{"STAT_TX_PACKET_512_1023_BYTES"},
+	{"STAT_TX_PACKET_1024_1518_BYTES"},
+	{"STAT_TX_PACKET_1519_1522_BYTES"},
+	{"STAT_TX_PACKET_1523_1548_BYTES"},
+	{"STAT_TX_PACKET_1549_2047_BYTES"},
+	{"STAT_TX_PACKET_2048_4095_BYTES"},
+	{"STAT_TX_PACKET_4096_8191_BYTES"},
+	{"STAT_TX_PACKET_8192_9215_BYTES"},
+	{"STAT_TX_PACKET_LARGE"},
+	{"STAT_TX_PACKET_SMALL"},
+	{"STAT_TX_BAD_FCS"},
+	{"STAT_TX_UNICAST"},
+	{"STAT_TX_MULTICAST"},
+	{"STAT_TX_BROADCAST"},
+	{"STAT_TX_VLAN"},
+	{"STAT_TX_PAUSE"},
+	{"STAT_TX_USER_PAUSE"},
+	{"STAT_TX_TSN_PREEMPTED_PKT"},
+	{"STAT_TX_TSN_FRAGMENT"},
+	{"STAT_TX_PCS_BAD_CODE"},
+	{"STAT_TX_CL82_49_CONVERT_ERR"},
+	{"STAT_TX_ECC_ERR0"},
+	{"STAT_TX_ECC_ERR1"},
+	{"STAT_RX_CYCLE_COUNT"},
+	{"STAT_RX_BIP_ERR_0"},
+	{"STAT_RX_BIP_ERR_1"},
+	{"STAT_RX_BIP_ERR_2"},
+	{"STAT_RX_BIP_ERR_3"},
+	{"STAT_RX_BIP_ERR_4"},
+	{"STAT_RX_BIP_ERR_5"},
+	{"STAT_RX_BIP_ERR_6"},
+	{"STAT_RX_BIP_ERR_7"},
+	{"STAT_RX_BIP_ERR_8"},
+	{"STAT_RX_BIP_ERR_9"},
+	{"STAT_RX_BIP_ERR_10"},
+	{"STAT_RX_BIP_ERR_11"},
+	{"STAT_RX_BIP_ERR_12"},
+	{"STAT_RX_BIP_ERR_13"},
+	{"STAT_RX_BIP_ERR_14"},
+	{"STAT_RX_BIP_ERR_15"},
+	{"STAT_RX_BIP_ERR_16"},
+	{"STAT_RX_BIP_ERR_17"},
+	{"STAT_RX_BIP_ERR_18"},
+	{"STAT_RX_BIP_ERR_19"},
+	{"STAT_RX_FRAMING_ERR_0"},
+	{"STAT_RX_FRAMING_ERR_1"},
+	{"STAT_RX_FRAMING_ERR_2"},
+	{"STAT_RX_FRAMING_ERR_3"},
+	{"STAT_RX_FRAMING_ERR_4"},
+	{"STAT_RX_FRAMING_ERR_5"},
+	{"STAT_RX_FRAMING_ERR_6"},
+	{"STAT_RX_FRAMING_ERR_7"},
+	{"STAT_RX_FRAMING_ERR_8"},
+	{"STAT_RX_FRAMING_ERR_9"},
+	{"STAT_RX_FRAMING_ERR_10"},
+	{"STAT_RX_FRAMING_ERR_11"},
+	{"STAT_RX_FRAMING_ERR_12"},
+	{"STAT_RX_FRAMING_ERR_13"},
+	{"STAT_RX_FRAMING_ERR_14"},
+	{"STAT_RX_FRAMING_ERR_15"},
+	{"STAT_RX_FRAMING_ERR_16"},
+	{"STAT_RX_FRAMING_ERR_17"},
+	{"STAT_RX_FRAMING_ERR_18"},
+	{"STAT_RX_FRAMING_ERR_19"},
+	{"STAT_RX_BAD_CODE"},
+	{"STAT_RX_PCS_BAD_CODE"},
+	{"STAT_RX_INVALID_START"},
+	{"STAT_RX_FEC_CW_0"},
+	{"STAT_RX_FEC_CW_1"},
+	{"STAT_RX_FEC_CW_2"},
+	{"STAT_RX_FEC_CW_3"},
+	{"STAT_RX_FEC_CORRECTED_CW_0"},
+	{"STAT_RX_FEC_CORRECTED_CW_1"},
+	{"STAT_RX_FEC_CORRECTED_CW_2"},
+	{"STAT_RX_FEC_CORRECTED_CW_3"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_0"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_1"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_2"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_3"},
+	{"STAT_RX_FEC_BIT_ERRTO1_0_0"},
+	{"STAT_RX_FEC_BIT_ERRTO1_0_1"},
+	{"STAT_RX_FEC_BIT_ERRTO1_0_2"},
+	{"STAT_RX_FEC_BIT_ERRTO1_0_3"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_0"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_1"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_2"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_3"},
+	{"STAT_RX_FEC_ERR_COUNT_0"},
+	{"STAT_RX_FEC_ERR_COUNT_1"},
+	{"STAT_RX_FEC_ERR_COUNT_2"},
+	{"STAT_RX_FEC_ERR_COUNT_3"},
+	{"STAT_RX_TOTAL_PACKETS"},
+	{"STAT_RX_TOTAL_GOOD_PACKETS"},
+	{"STAT_RX_TOTAL_BYTES"},
+	{"STAT_RX_TOTAL_GOOD_BYTES"},
+	{"STAT_RX_PACKET_64_BYTES"},
+	{"STAT_RX_PACKET_65_127_BYTES"},
+	{"STAT_RX_PACKET_128_255_BYTES"},
+	{"STAT_RX_PACKET_256_511_BYTES"},
+	{"STAT_RX_PACKET_512_1023_BYTES"},
+	{"STAT_RX_PACKET_1024_1518_BYTES"},
+	{"STAT_RX_PACKET_1519_1522_BYTES"},
+	{"STAT_RX_PACKET_1523_1548_BYTES"},
+	{"STAT_RX_PACKET_1549_2047_BYTES"},
+	{"STAT_RX_PACKET_2048_4095_BYTES"},
+	{"STAT_RX_PACKET_4096_8191_BYTES"},
+	{"STAT_RX_PACKET_8192_9215_BYTES"},
+	{"STAT_RX_PACKET_LARGE"},
+	{"STAT_RX_PACKET_SMALL"},
+	{"STAT_RX_UNDERSIZE"},
+	{"STAT_RX_FRAGMENT"},
+	{"STAT_RX_OVERSIZE"},
+	{"STAT_RX_TOOLONG"},
+	{"STAT_RX_JABBER	"},
+	{"STAT_RX_BAD_FCS"},
+	{"STAT_RX_PACKET_BAD_FCS"},
+	{"STAT_RX_STOMPED_FCS"},
+	{"STAT_RX_UNICAST"},
+	{"STAT_RX_MULTICAST"},
+	{"STAT_RX_BROADCAST"},
+	{"STAT_RX_VLAN"},
+	{"STAT_RX_PAUSE"},
+	{"STAT_RX_USER_PAUSE"},
+	{"STAT_RX_INRANGEERR"},
+	{"STAT_RX_TRUNCATED"},
+	{"STAT_RX_TEST_PATTERN_MISMATCH"},
+	{"STAT_RX_CL49_82_CONVERT_ERR"},
+	{"STAT_RX_TSN_PREEMPTED_PKT"},
+	{"STAT_RX_TSN_FRAGMENT"},
+	{"STAT_RX_ECC_ERR0"},
+	{"STAT_RX_ECC_ERR1"},
+
+};
+
+static struct axienet_ethtools_stat
+	axienet_get_ethtools_mrmac_strings_stats_1[] = {
+
+		// lane 1
+	{"STAT_TX_CYCLE_COUNT"},
+	{"STAT_TX_FRAME_ERROR"},
+	{"STAT_TX_TOTAL_PACKETS"},
+	{"STAT_TX_TOTAL_GOOD_PACKETS"},
+	{"STAT_TX_TOTAL_BYTES"},
+	{"STAT_TX_TOTAL_GOOD_BYTES"},
+	{"STAT_TX_PACKET_64_BYTES"},
+	{"STAT_TX_PACKET_65_127_BYTES"},
+	{"STAT_TX_PACKET_128_255_BYTES"},
+	{"STAT_TX_PACKET_256_511_BYTES"},
+	{"STAT_TX_PACKET_512_1023_BYTES"},
+	{"STAT_TX_PACKET_1024_1518_BYTES"},
+	{"STAT_TX_PACKET_1519_1522_BYTES"},
+	{"STAT_TX_PACKET_1523_1548_BYTES"},
+	{"STAT_TX_PACKET_1549_2047_BYTES"},
+	{"STAT_TX_PACKET_2048_4095_BYTES"},
+	{"STAT_TX_PACKET_4096_8191_BYTES"},
+	{"STAT_TX_PACKET_8192_9215_BYTES"},
+	{"STAT_TX_PACKET_LARGE"},
+	{"STAT_TX_PACKET_SMALL"},
+	{"STAT_TX_BAD_FCS"},
+	{"STAT_TX_UNICAST"},
+	{"STAT_TX_MULTICAST"},
+	{"STAT_TX_BROADCAST"},
+	{"STAT_TX_VLAN"},
+	{"STAT_TX_PAUSE"},
+	{"STAT_TX_USER_PAUSE"},
+	{"STAT_TX_TSN_PREEMPTED_PKT"},
+	{"STAT_TX_TSN_FRAGMENT"},
+	{"STAT_TX_PCS_BAD_CODE"},
+	{"STAT_TX_CL82_49_CONVERT_ERR"},
+	{"STAT_TX_ECC_ERR0"},
+	{"STAT_TX_ECC_ERR1"},
+	{"STAT_RX_CYCLE_COUNT"},
+	{"STAT_RX_FRAMING_ERR"},
+	{"STAT_RX_BAD_CODE"},
+	{"STAT_RX_PCS_BAD_CODE"},
+	{"STAT_RX_INVALID_START"},
+	{"STAT_RX_FEC_CW_1"},
+	{"STAT_RX_FEC_CORRECTED_CW"},
+	{"STAT_RX_FEC_UNCORRECTED_CW"},
+	{"STAT_RX_FEC_BIT_ERR_0TO1"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0"},
+	{"STAT_RX_FEC_ERR_COUNT"},
+	{"STAT_RX_TOTAL_PACKETS"},
+	{"STAT_RX_TOTAL_GOOD_PACKETS"},
+	{"STAT_RX_TOTAL_BYTES"},
+	{"STAT_RX_TOTAL_GOOD_BYTES"},
+	{"STAT_RX_PACKET_64_BYTES"},
+	{"STAT_RX_PACKET_65_127_BYTES"},
+	{"STAT_RX_PACKET_128_255_BYTES"},
+	{"STAT_RX_PACKET_256_511_BYTES"},
+	{"STAT_RX_PACKET_512_1023_BYTES"},
+	{"STAT_RX_PACKET_1024_1518_BYTES"},
+	{"STAT_RX_PACKET_1519_1522_BYTES"},
+	{"STAT_RX_PACKET_1523_1548_BYTES"},
+	{"STAT_RX_PACKET_1549_2047_BYTES"},
+	{"STAT_RX_PACKET_2048_4095_BYTES"},
+	{"STAT_RX_PACKET_4096_8191_BYTES"},
+	{"STAT_RX_PACKET_8192_9215_BYTES"},
+	{"STAT_RX_PACKET_LARGE"},
+	{"STAT_RX_PACKET_SMALL"},
+	{"STAT_RX_UNDERSIZE"},
+	{"STAT_RX_FRAGMENT"},
+	{"STAT_RX_OVERSIZE"},
+	{"STAT_RX_TOOLONG"},
+	{"STAT_RX_JABBER	"},
+	{"STAT_RX_BAD_FCS"},
+	{"STAT_RX_PACKET_BAD_FCS"},
+	{"STAT_RX_STOMPED_FCS"},
+	{"STAT_RX_UNICAST"},
+	{"STAT_RX_MULTICAST"},
+	{"STAT_RX_BROADCAST"},
+	{"STAT_RX_VLAN"},
+	{"STAT_RX_PAUSE"},
+	{"STAT_RX_USER_PAUSE"},
+	{"STAT_RX_INRANGEERR"},
+	{"STAT_RX_TRUNCATED"},
+	{"STAT_RX_TEST_PATTERN_MISMATCH"},
+	{"STAT_RX_CL49_82_CONVERT_ERR"},
+	{"STAT_RX_TSN_PREEMPTED_PKT"},
+	{"STAT_RX_TSN_FRAGMENT"},
+	{"STAT_RX_ECC_ERR0"},
+	{"STAT_RX_ECC_ERR1"},
+
+};
+
+static struct axienet_ethtools_stat
+	axienet_get_ethtools_mrmac_strings_stats_2[] = {
+
+		// lane 2
+	{"STAT_TX_CYCLE_COUNT"},
+	{"STAT_TX_FRAME_ERROR"},
+	{"STAT_TX_TOTAL_PACKETS"},
+	{"STAT_TX_TOTAL_GOOD_PACKETS"},
+	{"STAT_TX_TOTAL_BYTES"},
+	{"STAT_TX_TOTAL_GOOD_BYTES"},
+	{"STAT_TX_PACKET_64_BYTES"},
+	{"STAT_TX_PACKET_65_127_BYTES"},
+	{"STAT_TX_PACKET_12855_BYTES_2"},
+	{"STAT_TX_PACKET56_511_BYTES_2"},
+	{"STAT_TX_PACKET_512_1023_BYTES"},
+	{"STAT_TX_PACKET_1024_1518_BYTES"},
+	{"STAT_TX_PACKET_1519_1522_BYTES"},
+	{"STAT_TX_PACKET_1523_1548_BYTES"},
+	{"STAT_TX_PACKET_1549047_BYTES_2"},
+	{"STAT_TX_PACKET048_4095_BYTES_2"},
+	{"STAT_TX_PACKET_4096_8191_BYTES"},
+	{"STAT_TX_PACKET_8192_9215_BYTES"},
+	{"STAT_TX_PACKET_LARGE"},
+	{"STAT_TX_PACKET_SMALL"},
+	{"STAT_TX_BAD_FCS"},
+	{"STAT_TX_UNICAST"},
+	{"STAT_TX_MULTICAST"},
+	{"STAT_TX_BROADCAST	"},
+	{"STAT_TX_VLAN"},
+	{"STAT_TX_PAUSE	"},
+	{"STAT_TX_USER_PAUSE"},
+	{"STAT_TX_TSN_PREEMPTED_PKT"},
+	{"STAT_TX_TSN_FRAGMENT"},
+	{"STAT_TX_PCS_BAD_CODE"},
+	{"STAT_TX_CL82_49_CONVERT_ERR"},
+	{"STAT_TX_ECC_ERR0"},
+	{"STAT_TX_ECC_ERR1"},
+	{"STAT_RX_CYCLE_COUNT"},
+	{"STAT_RX_BIP_ERR_0"},
+	{"STAT_RX_BIP_ERR_1"},
+	{"STAT_RX_BIP_ERR_2"},
+	{"STAT_RX_BIP_ERR_3"},
+	{"STAT_RX_FRAMING_ERR_0"},
+	{"STAT_RX_FRAMING_ERR_1"},
+	{"STAT_RX_FRAMING_ERR_2"},
+	{"STAT_RX_FRAMING_ERR_3"},
+	{"STAT_RX_BAD_CODE"},
+	{"STAT_RX_PCS_BAD_CODE"},
+	{"STAT_RX_INVALID_START"},
+	{"STAT_RX_FEC_CW_0"},
+	{"STAT_RX_FEC_CW_1"},
+	{"STAT_RX_FEC_CW_2"},
+	{"STAT_RX_FEC_CW_3"},
+	{"STAT_RX_FEC_CORRECTED_CW_0"},
+	{"STAT_RX_FEC_CORRECTED_CW_1"},
+	{"STAT_RX_FEC_CORRECTED_CW_2"},
+	{"STAT_RX_FEC_CORRECTED_CW_3"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_0"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_1"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_2"},
+	{"STAT_RX_FEC_UNCORRECTED_CW_3"},
+	{"STAT_RX_FEC_BIT_ERR_0TO1_0"},
+	{"STAT_RX_FEC_BIT_ERR_0TO1_1"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_0"},
+	{"STAT_RX_FEC_BIT_ERR_1TO0_1"},
+	{"STAT_RX_FEC_ERR_COUNT_0"},
+	{"STAT_RX_FEC_ERR_COUNT_1"},
+	{"STAT_RX_TOTAL_PACKETS"},
+	{"STAT_RX_TOTAL_GOOD_PACKETS"},
+	{"STAT_RX_TOTAL_BYTES"},
+	{"STAT_RX_TOTAL_GOOD_BYTES"},
+	{"STAT_RX_PACKET_64_BYTES"},
+	{"STAT_RX_PACKET_65_127_BYTES"},
+	{"STAT_RX_PACKET_12855_BYTES_2"},
+	{"STAT_RX_PACKET56_511_BYTES_2"},
+	{"STAT_RX_PACKET_512_1023_BYTES"},
+	{"STAT_RX_PACKET_1024_1518_BYTES"},
+	{"STAT_RX_PACKET_1519_1522_BYTES"},
+	{"STAT_RX_PACKET_1523_1548_BYTES"},
+	{"STAT_RX_PACKET_1549047_BYTES_2"},
+	{"STAT_RX_PACKET048_4095_BYTES_2"},
+	{"STAT_RX_PACKET_4096_8191_BYTES"},
+	{"STAT_RX_PACKET_8192_9215_BYTES"},
+	{"STAT_RX_PACKET_LARGE"},
+	{"STAT_RX_PACKET_SMALL"},
+	{"STAT_RX_UNDERSIZE"},
+	{"STAT_RX_FRAGMENT"},
+	{"STAT_RX_OVERSIZE"},
+	{"STAT_RX_TOOLONG"},
+	{"STAT_RX_JABBER"},
+	{"STAT_RX_BAD_FCS"},
+	{"STAT_RX_PACKET_BAD_FCS"},
+	{"STAT_RX_STOMPED_FCS"},
+	{"STAT_RX_UNICAST"},
+	{"STAT_RX_MULTICAST"},
+	{"STAT_RX_BROADCAST"},
+	{"STAT_RX_VLAN"},
+	{"STAT_RX_PAUSE"},
+	{"STAT_RX_USER_PAUSE"},
+	{"STAT_RX_INRANGEERR"},
+	{"STAT_RX_TRUNCATED"},
+	{"STAT_RX_TEST_PATTERN_MISMATCH"},
+	{"STAT_RX_CL49_82_CONVERT_ERR"},
+	{"STAT_RX_TSN_PREEMPTED_PKT"},
+	{"STAT_RX_TSN_FRAGMENT"},
+	{"STAT_RX_ECC_ERR0"},
+	{"STAT_RX_ECC_ERR1"},
+
+};
+
+static struct axienet_ethtools_stat
+	axienet_get_ethtools_mrmac_strings_stats_3[] = {
+
+		// lane 3
+	{"TX_CYCLE_COUNT"},
+	{"TX_FRAME_ERROR"},
+	{"TX_TOTAL_PACKETS"},
+	{"TX_TOTAL_GOOD_PACKETS"},
+	{"TX_TOTAL_BYTES"},
+	{"TX_TOTAL_GOOD_BYTES"},
+	{"TX_PACKET_64_BYTES"},
+	{"TX_PACKET_65_127_BYTES"},
+	{"TX_PACKET_128_255_BYTES"},
+	{"TX_PACKET_256_511_BYTES"},
+	{"TX_PACKET_512_1023_BYTES"},
+	{"TX_PACKET_1024_1518_BYTES"},
+	{"TX_PACKET_1519_1522_BYTES"},
+	{"TX_PACKET_1523_1548_BYTES"},
+	{"TX_PACKET_1549_2047_BYTES"},
+	{"TX_PACKET_2048_4095_BYTES"},
+	{"TX_PACKET_4096_8191_BYTES"},
+	{"TX_PACKET_8192_9215_BYTES"},
+	{"TX_PACKET_LARGE"},
+	{"TX_PACKET_SMALL"},
+	{"TX_BAD_FCS	"},
+	{"TX_UNICAST"},
+	{"TX_MULTICAST"},
+	{"TX_BROADCAST"},
+	{"TX_VLAN"},
+	{"TX_PAUSE"},
+	{"TX_USER_PAUSE"},
+	{"TX_TSN_PREEMPTED_PKT"},
+	{"TX_TSN_FRAGMENT"},
+	{"TX_PCS_BAD_CODE"},
+	{"TX_CL82_49_CONVERT_ERR"},
+	{"TX_ECC_ERR0"},
+	{"TX_ECC_ERR1"},
+	{"RX_CYCLE_COUNT"},
+	{"RX_FRAMING_ERR"},
+	{"RX_BAD_CODE"},
+	{"RX_PCS_BAD_CODE"},
+	{"RX_INVALID_START"},
+	{"RX_FEC_CW"},
+	{"RX_FEC_CORRECTED_CW"},
+	{"RX_FEC_UNCORRECTED_CW"},
+	{"RX_FEC_BIT_ERR_0TO1"},
+	{"RX_FEC_BIT_ERR_1TO0"},
+	{"RX_FEC_ERR_COUNT"},
+	{"RX_TOTAL_PACKETS"},
+	{"RX_TOTAL_GOOD_PACKETS"},
+	{"RX_TOTAL_BYTES"},
+	{"RX_TOTAL_GOOD_BYTES"},
+	{"RX_PACKET_64_BYTES"},
+	{"RX_PACKET_65_127_BYTES"},
+	{"RX_PACKET_128_255_BYTES"},
+	{"RX_PACKET_256_511_BYTES"},
+	{"RX_PACKET_512_1023_BYTES"},
+	{"RX_PACKET_1024_1518_BYTES"},
+	{"RX_PACKET_1519_1522_BYTES"},
+	{"RX_PACKET_1523_1548_BYTES"},
+	{"RX_PACKET_1549_2047_BYTES"},
+	{"RX_PACKET_2048_4095_BYTES"},
+	{"RX_PACKET_4096_8191_BYTES"},
+	{"RX_PACKET_8192_9215_BYTES"},
+	{"RX_PACKET_LARGE"},
+	{"RX_PACKET_SMALL"},
+	{"RX_UNDERSIZE"},
+	{"RX_FRAGMENT"},
+	{"RX_OVERSIZE"},
+	{"RX_TOOLONG"},
+	{"RX_JABBER"},
+	{"RX_BAD_FCS"},
+	{"RX_PACKET_BAD_FCS"},
+	{"RX_STOMPED_FCS"},
+	{"RX_UNICAST"},
+	{"RX_MULTICAST"},
+	{"RX_BROADCAST"},
+	{"RX_VLAN"},
+	{"RX_PAUSE"},
+	{"RX_USER_PAUSE"},
+	{"RX_INRANGEERR"},
+	{"RX_TRUNCATED"},
+	{"RX_TEST_PATTERN_MISMATCH"},
+	{"RX_CL49_82_CONVERT_ERR"},
+	{"RX_TSN_PREEMPTED_PKT"},
+	{"RX_TSN_FRAGMENT"},
+	{"RX_ECC_ERR0"},
+	{"RX_ECC_ERR1"},
+
+};
+
+struct axienet_ethtools_mrmac_sstat {
+	size_t sz;
+	struct axienet_ethtools_stat *st;
+};
+
+static struct axienet_ethtools_mrmac_sstat mrmac_sstat[MRMAC_MAX_GT_LANES] = {
+	{
+	(int)ARRAY_SIZE(axienet_get_ethtools_mrmac_strings_stats_0),
+	axienet_get_ethtools_mrmac_strings_stats_0
+	},
+	{
+	(int)ARRAY_SIZE(axienet_get_ethtools_mrmac_strings_stats_1),
+	axienet_get_ethtools_mrmac_strings_stats_1
+	},
+	{
+	(int)ARRAY_SIZE(axienet_get_ethtools_mrmac_strings_stats_2),
+	axienet_get_ethtools_mrmac_strings_stats_2
+	},
+	{
+	(int)ARRAY_SIZE(axienet_get_ethtools_mrmac_strings_stats_3),
+	axienet_get_ethtools_mrmac_strings_stats_3
+	},
+};
+
 /**
  * axienet_dma_bd_release - Release buffer descriptor rings
  * @ndev:	Pointer to the net_device structure
@@ -475,14 +941,20 @@ static inline void axienet_mrmac_reset(struct axienet_local *lp)
 {
 	u32 val, reg;
 
-	val = axienet_ior(lp, MRMAC_RESET_OFFSET);
+	val = axienet_ior(lp, MRMAC_RESET_REG_0_OFFSET);
 	val |= (MRMAC_RX_SERDES_RST_MASK | MRMAC_TX_SERDES_RST_MASK |
 		MRMAC_RX_RST_MASK | MRMAC_TX_RST_MASK);
-	axienet_iow(lp, MRMAC_RESET_OFFSET, val);
+	axienet_iow(lp, MRMAC_RESET_REG_0_OFFSET, val);
 	mdelay(MRMAC_RESET_DELAY);
 
-	reg = axienet_ior(lp, MRMAC_MODE_OFFSET);
-	if (lp->mrmac_rate == SPEED_25000) {
+	reg = axienet_ior(lp, MRMAC_MODE_REG_0_OFFSET);
+	if (lp->mrmac_rate == SPEED_100000) {
+		reg &= ~MRMAC_CTL_RATE_CFG_MASK;
+		reg |= MRMAC_CTL_DATA_RATE_100G;
+		reg |= (MRMAC_CTL_AXIS_CFG_100G_IND << MRMAC_CTL_AXIS_CFG_SHIFT);
+		reg |= (MRMAC_CTL_SERDES_WIDTH_100G <<
+			MRMAC_CTL_SERDES_WIDTH_SHIFT);
+	} else if (lp->mrmac_rate == SPEED_25000) {
 		reg &= ~MRMAC_CTL_RATE_CFG_MASK;
 		reg |= MRMAC_CTL_DATA_RATE_25G;
 		reg |= (MRMAC_CTL_AXIS_CFG_25G_IND << MRMAC_CTL_AXIS_CFG_SHIFT);
@@ -498,12 +970,12 @@ static inline void axienet_mrmac_reset(struct axienet_local *lp)
 
 	/* For tick reg */
 	reg |= MRMAC_CTL_PM_TICK_MASK;
-	axienet_iow(lp, MRMAC_MODE_OFFSET, reg);
+	axienet_iow(lp, MRMAC_MODE_REG_0_OFFSET, reg);
 
-	val = axienet_ior(lp, MRMAC_RESET_OFFSET);
+	val = axienet_ior(lp, MRMAC_RESET_REG_0_OFFSET);
 	val &= ~(MRMAC_RX_SERDES_RST_MASK | MRMAC_TX_SERDES_RST_MASK |
 		MRMAC_RX_RST_MASK | MRMAC_TX_RST_MASK);
-	axienet_iow(lp, MRMAC_RESET_OFFSET, val);
+	axienet_iow(lp, MRMAC_RESET_REG_0_OFFSET, val);
 }
 
 static inline int axienet_mrmac_gt_reset(struct net_device *ndev)
@@ -511,7 +983,6 @@ static inline int axienet_mrmac_gt_reset(struct net_device *ndev)
 	struct axienet_local *lp = netdev_priv(ndev);
 	u32 err, val;
 	int i;
-
 	if (mrmac_pll_rst == 0) {
 		for (i = 0; i < MRMAC_MAX_GT_LANES; i++) {
 			iowrite32(MRMAC_GT_RST_ALL_MASK, (lp->gt_ctrl +
@@ -521,11 +992,12 @@ static inline int axienet_mrmac_gt_reset(struct net_device *ndev)
 			iowrite32(0, (lp->gt_ctrl + (MRMAC_GT_LANE_OFFSET * i) +
 				      MRMAC_GT_CTRL_OFFSET));
 		}
+		dev_dbg(lp->dev, "pll reset\n");
 
 		/* Wait for PLL lock with timeout */
 		err = readl_poll_timeout(lp->gt_pll + MRMAC_GT_PLL_STS_OFFSET,
 					 val, (val & MRMAC_GT_PLL_DONE_MASK),
-					 10, DELAY_OF_ONE_MILLISEC);
+					 10, DELAY_OF_ONE_MILLISEC * 100);
 		if (err) {
 			netdev_err(ndev, "MRMAC PLL lock not complete! Cross-check the MAC ref clock configuration\n");
 			return -ENODEV;
@@ -533,7 +1005,11 @@ static inline int axienet_mrmac_gt_reset(struct net_device *ndev)
 		mrmac_pll_rst = 1;
 	}
 
-	if (lp->mrmac_rate == SPEED_25000)
+	if (lp->mrmac_rate == SPEED_100000)
+		iowrite32(MRMAC_GT_100G_MASK, (lp->gt_ctrl +
+			  MRMAC_GT_LANE_OFFSET * lp->gt_lane +
+			  MRMAC_GT_RATE_OFFSET));
+	else if (lp->mrmac_rate == SPEED_25000)
 		iowrite32(MRMAC_GT_25G_MASK, (lp->gt_ctrl +
 			  MRMAC_GT_LANE_OFFSET * lp->gt_lane +
 			  MRMAC_GT_RATE_OFFSET));
@@ -1964,39 +2440,56 @@ static int axienet_open(struct net_device *ndev)
 
 	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
 		u32 val;
+		const u32 blklck[MRMAC_MAX_GT_LANES] = {
+			MRMAC_RX_BLKLCK_MASK_0, MRMAC_RX_BLKLCK_MASK_1,
+			MRMAC_RX_BLKLCK_MASK_2, MRMAC_RX_BLKLCK_MASK_3,
+		};
 
 		/* Reset MRMAC */
 		axienet_mrmac_reset(lp);
 
-		mdelay(MRMAC_RESET_DELAY);
+		mdelay(MRMAC_RESET_DELAY * 100);
 		/* Check for block lock bit to be set. This ensures that
 		 * MRMAC ethernet IP is functioning normally.
 		 */
-		axienet_iow(lp, MRMAC_TX_STS_OFFSET, MRMAC_STS_ALL_MASK);
-		axienet_iow(lp, MRMAC_RX_STS_OFFSET, MRMAC_STS_ALL_MASK);
+		axienet_iow(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
 		err = readx_poll_timeout(axienet_get_mrmac_blocklock, lp, val,
-					 (val & MRMAC_RX_BLKLCK_MASK), 10, DELAY_OF_ONE_MILLISEC);
+			((val & blklck[lp->gt_lane]) == blklck[lp->gt_lane]), 10,
+			DELAY_OF_ONE_SECOND * 3);
+
 		if (err)
-			netdev_err(ndev, "MRMAC block lock not complete! Cross-check the MAC ref clock configuration\n");
+			netdev_err(ndev, "MRMAC block lock (0x%x) not complete! "
+					"Cross-check the MAC ref clock configuration\n", val);
+		else
+			netdev_info(ndev, "MRMAC block lock (0x%x) complete!\n", val);
 
 		err = readx_poll_timeout(axienet_get_mrmac_rx_status, lp, val,
-					 (val & MRMAC_RX_STATUS_MASK), 10, DELAY_OF_ONE_MILLISEC);
+				 (val & MRMAC_RX_STATUS_MASK), 10, DELAY_OF_ONE_SECOND * 3);
 		if (err) {
 			netdev_err(ndev, "MRMAC Link is down!\n");
 			ret = -ENODEV;
 			goto err_eth_irq;
 		}
 
-		axienet_iow(lp, MRMAC_STATRX_VALID_CTRL_OFFSET, MRMAC_STS_ALL_MASK);
-		val = axienet_ior(lp, MRMAC_STATRX_VALID_CTRL_OFFSET);
+		err = readx_poll_timeout(axienet_get_mrmac_rx_ctrl_code, lp, val,
+				 (val & MRMAC_RX_VALID_MASK), 10, DELAY_OF_ONE_SECOND * 3);
 
-		if (!(val & MRMAC_RX_VALID_MASK)) {
-			netdev_err(ndev, "MRMAC Link is down! No recent RX Valid Control Code\n");
-			ret = -ENODEV;
-			goto err_eth_irq;
+		if (err) {
+			// FIXME show warning, ignore this error for 100GB MRMAC
+			if (lp->mrmac_rate == SPEED_100000) {
+				netdev_warn(ndev,
+					"No recent RX Valid Control Code\n");
+			} else {
+				netdev_err(ndev,
+					"MRMAC Link is down! "
+					"No recent RX Valid Control Code\n");
+				ret = -ENODEV;
+				goto err_eth_irq;
+			}
 		}
 		netdev_info(ndev, "MRMAC setup at %d\n", lp->mrmac_rate);
-		axienet_iow(lp, MRMAC_TICK_OFFSET, MRMAC_TICK_TRIGGER);
+		axienet_iow(lp, MRMAC_TICK_REG_0_OFFSET, MRMAC_TICK_TRIGGER);
 	}
 
 	/* Enable interrupts for Axi Ethernet core (if defined) */
@@ -2079,7 +2572,8 @@ static int axienet_stop(struct net_device *ndev)
 		cr &= ~(XAXIDMA_CR_RUNSTOP_MASK | XAXIDMA_IRQ_ALL_MASK);
 		axienet_dma_out32(q, XAXIDMA_TX_CR_OFFSET, cr);
 
-		axienet_iow(lp, XAE_IE_OFFSET, 0);
+		if (lp->axienet_config->mactype != XAXIENET_MRMAC)
+			axienet_iow(lp, XAE_IE_OFFSET, 0);
 
 		/* Give DMAs a chance to halt gracefully */
 		sr = axienet_dma_in32(q, XAXIDMA_RX_SR_OFFSET);
@@ -2374,7 +2868,16 @@ static void axienet_ethtools_get_drvinfo(struct net_device *ndev,
  */
 static int axienet_ethtools_get_regs_len(struct net_device *ndev)
 {
-	return sizeof(u32) * AXIENET_REGS_N;
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	// FIXME only support lane 0 for now
+	if ( (lp->axienet_config->mactype == XAXIENET_MRMAC) &&
+		lp->gt_lane)
+		return -EOPNOTSUPP;
+	else if (lp->axienet_config->mactype == XAXIENET_MRMAC)
+		return sizeof(u32) * MRMAC_AXIENET_REGS_N;
+	else
+		return sizeof(u32) * AXIENET_REGS_N;
 }
 
 /**
@@ -2390,55 +2893,620 @@ static int axienet_ethtools_get_regs_len(struct net_device *ndev)
 static void axienet_ethtools_get_regs(struct net_device *ndev,
 				      struct ethtool_regs *regs, void *ret)
 {
+	size_t len;
+
 	u32 *data = (u32 *)ret;
-	size_t len = sizeof(u32) * AXIENET_REGS_N;
 	struct axienet_local *lp = netdev_priv(ndev);
 
-	regs->version = 0;
-	regs->len = len;
-
-	memset(data, 0, len);
-	data[0] = axienet_ior(lp, XAE_RAF_OFFSET);
-	data[1] = axienet_ior(lp, XAE_TPF_OFFSET);
-	data[2] = axienet_ior(lp, XAE_IFGP_OFFSET);
-	data[3] = axienet_ior(lp, XAE_IS_OFFSET);
-	data[4] = axienet_ior(lp, XAE_IP_OFFSET);
-	data[5] = axienet_ior(lp, XAE_IE_OFFSET);
-	data[6] = axienet_ior(lp, XAE_TTAG_OFFSET);
-	data[7] = axienet_ior(lp, XAE_RTAG_OFFSET);
-	data[8] = axienet_ior(lp, XAE_UAWL_OFFSET);
-	data[9] = axienet_ior(lp, XAE_UAWU_OFFSET);
-	data[10] = axienet_ior(lp, XAE_TPID0_OFFSET);
-	data[11] = axienet_ior(lp, XAE_TPID1_OFFSET);
-	data[12] = axienet_ior(lp, XAE_PPST_OFFSET);
-	data[13] = axienet_ior(lp, XAE_RCW0_OFFSET);
-	data[14] = axienet_ior(lp, XAE_RCW1_OFFSET);
-	data[15] = axienet_ior(lp, XAE_TC_OFFSET);
-	data[16] = axienet_ior(lp, XAE_FCC_OFFSET);
-	data[17] = axienet_ior(lp, XAE_EMMC_OFFSET);
-	data[18] = axienet_ior(lp, XAE_RMFC_OFFSET);
-	data[19] = axienet_ior(lp, XAE_MDIO_MC_OFFSET);
-	data[20] = axienet_ior(lp, XAE_MDIO_MCR_OFFSET);
-	data[21] = axienet_ior(lp, XAE_MDIO_MWD_OFFSET);
-	data[22] = axienet_ior(lp, XAE_MDIO_MRD_OFFSET);
-	data[23] = axienet_ior(lp, XAE_TEMAC_IS_OFFSET);
-	data[24] = axienet_ior(lp, XAE_TEMAC_IP_OFFSET);
-	data[25] = axienet_ior(lp, XAE_TEMAC_IE_OFFSET);
-	data[26] = axienet_ior(lp, XAE_TEMAC_IC_OFFSET);
-	data[27] = axienet_ior(lp, XAE_UAW0_OFFSET);
-	data[28] = axienet_ior(lp, XAE_UAW1_OFFSET);
-	data[29] = axienet_ior(lp, XAE_FMC_OFFSET);
-	data[30] = axienet_ior(lp, XAE_AF0_OFFSET);
-	data[31] = axienet_ior(lp, XAE_AF1_OFFSET);
-	/* Support only single DMA queue */
-	data[32] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_CR_OFFSET);
-	data[33] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_SR_OFFSET);
-	data[34] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_CDESC_OFFSET);
-	data[35] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_TDESC_OFFSET);
-	data[36] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_CR_OFFSET);
-	data[37] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_SR_OFFSET);
-	data[38] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_CDESC_OFFSET);
-	data[39] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_TDESC_OFFSET);
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
+
+		int n = 0;
+		int i;
+
+		len = sizeof(u32) * MRMAC_AXIENET_REGS_N;
+		regs->len = len;
+		memset(data, 0xff, len);
+		regs->version = 0;
+
+		switch(lp->gt_lane) {
+
+		case 0: // lane 0
+		// configuration registers - some are latched and updated after writing
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_REVISION_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_RESET_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_MODE_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_MTU_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG2_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG3_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG4_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TICK_REG_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_0_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_0_MSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_0_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_0_MSB_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_1588_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_0_OFFSET));
+
+		for (i = MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_0_OFFSET;
+			i <= MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_0_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG2_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG3_0_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+						     
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_EMA_MRMAC_CONFIGURATION_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_AXI_FIFO_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_USER_REG_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TEST_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID0_0_LSB_OFFSET;
+			i <= MRMAC_CONFIGURATIONVL_MARKER_ID19_0_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID19_0_MSB_OFFSET + sizeof(u32);
+			i < MRMAC_CONFIGURATIONEMPTY0_0_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0x0ffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONEMPTY0_0_OFFSET;
+			i <= MRMAC_CONFIGURATIONEMPTY9_0_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+						     
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_0_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_0_OFFSET;
+			i <= MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_0_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_0_MSB_OFFSET + sizeof(u32);
+			i < MRMAC_STAT_TX_STATUS_REG1_0_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0xffffffff);
+
+		// status registers - some are latched and updated after writing
+		axienet_iow(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET));
+		axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_RT_STATUS_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_RT_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_AM_REPEAT_ERR_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_RX_LANE_DEMUXED_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIP_OVERRIDE_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_FEC_RT_STATUS_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_FEC_LANE_FILL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_RT_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_TX_FLOW_CONTROL_REG1_0_OFFSET;
+			i <= MRMAC_STAT_RX_FLOW_CONTROL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_1588_TOD_0_LSB_OFFSET;
+		i <= MRMAC_STAT_RX_1588_TOD_0_MSB_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_BIT_SLIP_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIT_SLIP4_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_ECC_ERROR_0_OFFSET;
+			i <= MRMAC_STAT_RX_ECC_ERROR_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_STATISTICS_READY_0_OFFSET));
+		break;
+
+#if 0
+		case 1: // lane 1
+		// configuration registers - some are latched and updated after writing
+		data[n++] = cpu_to_be32(0x00000001);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_RESET_REG_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_MODE_REG_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_REG1_1_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_REG1_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_MTU_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG1_1_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TICK_REG_1_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_1_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_1_MSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_1_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_1_MSB_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_1588_REG_1_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_1_OFFSET;
+			i <= MRMAC_FEC_CONFIGURATION_REG1_1_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+						     
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_AXI_FIFO_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_USER_REG_1_OFFSET));
+
+		for (i = MRMAC_USER_REG_1_OFFSET + sizeof(u32);
+			i < MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_1_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_SYSTIMER_CONFIG_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_TIMESTAMP_CONFIG_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_1588_OFFSET_TABLE_CONFIG_1_OFFSET));
+
+		for (i = MRMAC_CONFIGURATION_RX_1588_SYSTIMER_CONFIG_1_OFFSET;
+			i <= MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_1_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		// status registers - some are latched and updated after writing
+		axienet_iow(lp, MRMAC_STAT_TX_STATUS_REG1_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_STATUS_REG1_1_OFFSET));
+		axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_STATUS_REG1_1_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_RT_STATUS_REG1_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_RT_STATUS_REG1_1_OFFSET));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		axienet_iow(lp, MRMAC_STAT_RX_BLOCK_LOCK_REG_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_BLOCK_LOCK_REG_1_OFFSET));
+
+		for (i = MRMAC_STAT_RX_BLOCK_LOCK_REG_1_OFFSET + sizeof(u32);
+			i < MRMAC_STAT_RX_FEC_STATUS_REG_1_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(0xffffffff); // undefined
+		}
+
+		axienet_iow(lp, MRMAC_STAT_RX_FEC_STATUS_REG_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_1_OFFSET));
+
+		for (i = MRMAC_STAT_RX_FEC_RT_STATUS_REG_1_OFFSET;
+			i <= MRMAC_STAT_RX_FEC_LANE_FILL_REG_1_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+						     
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_RT_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_TX_FLOW_CONTROL_REG1_1_OFFSET;
+			i <= MRMAC_STAT_RX_FLOW_CONTROL_REG1_1_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_1588_TOD_1_LSB_OFFSET;
+		i <= MRMAC_STAT_RX_1588_TOD_1_MSB_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_BIT_SLIP_1_OFFSET));
+
+		for (i = MRMAC_STAT_TX_ECC_ERROR_1_OFFSET;
+			i <= MRMAC_STAT_RX_ECC_ERROR_1_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		axienet_iow(lp, MRMAC_STAT_STATISTICS_READY_1_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_STATISTICS_READY_1_OFFSET));
+		break;
+
+		case 2: // lane 2
+		data[n++] = cpu_to_be32(0x00000001);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_RESET_REG_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_MODE_REG_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_REG1_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_MTU_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG1_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG2_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG3_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG4_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TICK_REG_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_MSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_MSB_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_1588_REG_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_OFFSET));
+
+		for (i = MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_OFFSET;
+			i <= MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG2_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG3_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_EMA_MRMAC_CONFIGURATION_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_AXI_FIFO_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_USER_REG_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TEST_REG_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID0_LSB;
+			i <= MRMAC_CONFIGURATIONVL_MARKER_ID19_MSB;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID19_MSB + sizeof(u32);
+			i < MRMAC_CONFIGURATIONEMPTY0;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0x0ffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONEMPTY0;
+			i <= MRMAC_CONFIGURATIONEMPTY9;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_SYSTIMER_CONFIG));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_TIMESTAMP_CONFIG));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_OFFSET_TABLE_CONFIG));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONRX_1588_SYSTIMER_CONFIG;
+			i <= MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_MSB;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_MSB + sizeof(u32);
+			i < MRMAC_STAT_TX_STATUS_REG1_0_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0xffffffff);
+
+		// status registers - some are latched and updated after writing
+		axienet_iow(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET));
+		axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_RT_STATUS_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_RT_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_AM_REPEAT_ERR_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_RX_LANE_DEMUXED_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIP_OVERRIDE_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_FEC_RT_STATUS_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_FEC_LANE_FILL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_RT_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_TX_FLOW_CONTROL_REG1_0_OFFSET;
+			i <= MRMAC_STAT_RX_FLOW_CONTROL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_1588_TOD_0_LSB_OFFSET;
+		i <= MRMAC_STAT_RX_1588_TOD_0_MSB_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_BIT_SLIP_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIT_SLIP4_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_ECC_ERROR_0_OFFSET;
+			i <= MRMAC_STAT_RX_ECC_ERROR_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_STATISTICS_READY_0_OFFSET));
+		break;
+
+		case 3: // lane 3
+		data[n++] = cpu_to_be32(0x00000001);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_RESET_REG_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_MODE_REG_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_REG1_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_RX_MTU_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG1_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff);  // undefined
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG2_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG3_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_VL_LENGTH_REG4_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TICK_REG_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_A_MSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_LSB_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_TEST_PAT_SEED_B_MSB_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_1588_REG_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG1_OFFSET));
+
+		for (i = MRMAC_CONFIGURATION_TX_FLOW_CONTROL_REFRESH_REG2_OFFSET;
+			i <= MRMAC_CONFIGURATION_RX_FLOW_CONTROL_SA_REG1_MSB_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG2_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_FEC_MRMAC_CONFIGURATION_REG3_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_EMA_MRMAC_CONFIGURATION_REG1_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATION_TX_AXI_FIFO_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_USER_REG_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_TEST_REG_OFFSET));
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID0_LSB;
+			i <= MRMAC_CONFIGURATIONVL_MARKER_ID19_MSB;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_CONFIGURATIONVL_MARKER_ID19_MSB + sizeof(u32);
+			i < MRMAC_CONFIGURATIONEMPTY0;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0x0ffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONEMPTY0;
+			i <= MRMAC_CONFIGURATIONEMPTY9;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_SYSTIMER_CONFIG));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_TIMESTAMP_CONFIG));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_CONFIGURATIONTX_1588_OFFSET_TABLE_CONFIG));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_CONFIGURATIONRX_1588_SYSTIMER_CONFIG;
+			i <= MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_MSB;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+
+		for (i = MRMAC_MONITOR_RX_1588_INCR_SYSTIMER_MSB + sizeof(u32);
+			i < MRMAC_STAT_TX_STATUS_REG1_0_OFFSET;
+				i+= sizeof(u32) )
+			data[n++] = cpu_to_be32(0xffffffff);
+
+		// status registers - some are latched and updated after writing
+		axienet_iow(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_STATUS_REG1_0_OFFSET));
+		axienet_iow(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_RT_STATUS_REG1_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_RT_STATUS_REG1_0_OFFSET));
+
+		data[n++] = cpu_to_be32(0xffffffff); // undefined
+
+		for (i = MRMAC_STAT_RX_BLOCK_LOCK_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_AM_REPEAT_ERR_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_RX_LANE_DEMUXED_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIP_OVERRIDE_REG_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_FEC_RT_STATUS_REG_0_OFFSET;
+			i <= MRMAC_STAT_RX_FEC_LANE_FILL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		axienet_iow(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET, MRMAC_STS_ALL_MASK);
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_STATUS_REG_0_OFFSET));
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_TX_FEC_RT_STATUS_REG_0_OFFSET));
+
+		for (i = MRMAC_STAT_TX_FLOW_CONTROL_REG1_0_OFFSET;
+			i <= MRMAC_STAT_RX_FLOW_CONTROL_REG1_0_OFFSET;
+				i+= sizeof(u32) ) {
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_1588_TOD_0_LSB_OFFSET;
+		i <= MRMAC_STAT_RX_1588_TOD_0_MSB_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_RX_VALID_CTRL_CODE_0_OFFSET));
+
+		for (i = MRMAC_STAT_RX_BIT_SLIP_0_OFFSET;
+			i <= MRMAC_STAT_RX_BIT_SLIP4_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+		}
+
+		for (i = MRMAC_STAT_TX_ECC_ERROR_0_OFFSET;
+			i <= MRMAC_STAT_RX_ECC_ERROR_0_OFFSET;
+				i+= sizeof(u32) ) {
+			data[n++] = cpu_to_be32(axienet_ior(lp, i));
+			axienet_iow(lp, i, MRMAC_STS_ALL_MASK);
+		}
+		data[n++] = cpu_to_be32(axienet_ior(lp, MRMAC_STAT_STATISTICS_READY_0_OFFSET));
+		break;
+#endif
+
+		default: // bad lane
+			netdev_err(ndev,
+			      "bad lane:%d\n", lp->gt_lane);
+		};
+
+	} else {
+
+		len = sizeof(u32) * AXIENET_REGS_N;
+		regs->len = len;
+		memset(data, 0, len);
+		regs->version = 0;
+
+		data[0] = axienet_ior(lp, XAE_RAF_OFFSET);
+		data[1] = axienet_ior(lp, XAE_TPF_OFFSET);
+		data[2] = axienet_ior(lp, XAE_IFGP_OFFSET);
+		data[3] = axienet_ior(lp, XAE_IS_OFFSET);
+		data[4] = axienet_ior(lp, XAE_IP_OFFSET);
+		data[5] = axienet_ior(lp, XAE_IE_OFFSET);
+		data[6] = axienet_ior(lp, XAE_TTAG_OFFSET);
+		data[7] = axienet_ior(lp, XAE_RTAG_OFFSET);
+		data[8] = axienet_ior(lp, XAE_UAWL_OFFSET);
+		data[9] = axienet_ior(lp, XAE_UAWU_OFFSET);
+		data[10] = axienet_ior(lp, XAE_TPID0_OFFSET);
+		data[11] = axienet_ior(lp, XAE_TPID1_OFFSET);
+		data[12] = axienet_ior(lp, XAE_PPST_OFFSET);
+		data[13] = axienet_ior(lp, XAE_RCW0_OFFSET);
+		data[14] = axienet_ior(lp, XAE_RCW1_OFFSET);
+		data[15] = axienet_ior(lp, XAE_TC_OFFSET);
+		data[16] = axienet_ior(lp, XAE_FCC_OFFSET);
+		data[17] = axienet_ior(lp, XAE_EMMC_OFFSET);
+		data[18] = axienet_ior(lp, XAE_RMFC_OFFSET);
+		data[19] = axienet_ior(lp, XAE_MDIO_MC_OFFSET);
+		data[20] = axienet_ior(lp, XAE_MDIO_MCR_OFFSET);
+		data[21] = axienet_ior(lp, XAE_MDIO_MWD_OFFSET);
+		data[22] = axienet_ior(lp, XAE_MDIO_MRD_OFFSET);
+		data[23] = axienet_ior(lp, XAE_TEMAC_IS_OFFSET);
+		data[24] = axienet_ior(lp, XAE_TEMAC_IP_OFFSET);
+		data[25] = axienet_ior(lp, XAE_TEMAC_IE_OFFSET);
+		data[26] = axienet_ior(lp, XAE_TEMAC_IC_OFFSET);
+		data[27] = axienet_ior(lp, XAE_UAW0_OFFSET);
+		data[28] = axienet_ior(lp, XAE_UAW1_OFFSET);
+		data[29] = axienet_ior(lp, XAE_FMC_OFFSET);
+		data[30] = axienet_ior(lp, XAE_AF0_OFFSET);
+		data[31] = axienet_ior(lp, XAE_AF1_OFFSET);
+		/* Support only single DMA queue */
+		data[32] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_CR_OFFSET);
+		data[33] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_SR_OFFSET);
+		data[34] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_CDESC_OFFSET);
+		data[35] = axienet_dma_in32(lp->dq[0], XAXIDMA_TX_TDESC_OFFSET);
+		data[36] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_CR_OFFSET);
+		data[37] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_SR_OFFSET);
+		data[38] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_CDESC_OFFSET);
+		data[39] = axienet_dma_in32(lp->dq[0], XAXIDMA_RX_TDESC_OFFSET);
+	}
 }
 
 static void
@@ -2728,15 +3796,29 @@ static int axienet_ethtools_get_ts_info(struct net_device *ndev,
  */
 int axienet_ethtools_sset_count(struct net_device *ndev, int sset)
 {
-	switch (sset) {
-	case ETH_SS_STATS:
+	struct axienet_local *lp = netdev_priv(ndev);
+
+	/* for MRMAC only */
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
+
+		switch (sset) {
+		case ETH_SS_STATS:
+			return mrmac_sstat[lp->gt_lane].sz;
+		default:
+			return -EOPNOTSUPP;
+		} // end switch
+	} else {
+		/* other than MRMAC */
+		switch (sset) {
+		case ETH_SS_STATS:
 #ifdef CONFIG_AXIENET_HAS_MCDMA
-		return axienet_sset_count(ndev, sset);
+			return axienet_sset_count(ndev, sset);
 #else
-		return AXIENET_ETHTOOLS_SSTATS_LEN;
+			return AXIENET_ETHTOOLS_SSTATS_LEN;
 #endif
-	default:
-		return -EOPNOTSUPP;
+		default:
+			return -EOPNOTSUPP;
+		} // end switch
 	}
 }
 
@@ -2754,13 +3836,373 @@ void axienet_ethtools_get_stats(struct net_device *ndev,
 				u64 *data)
 {
 	unsigned int i = 0;
+	unsigned int j;
+	struct axienet_local *lp = netdev_priv(ndev);
+	union {
+		u64 stat_reg;
+		u32 reg[2];
+	} reg;
+
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
 
-	data[i++] = ndev->stats.tx_packets;
-	data[i++] = ndev->stats.rx_packets;
-	data[i++] = ndev->stats.tx_bytes;
-	data[i++] = ndev->stats.rx_bytes;
-	data[i++] = ndev->stats.tx_errors;
-	data[i++] = ndev->stats.rx_missed_errors + ndev->stats.rx_frame_errors;
+		/* For tick reg */
+		if (!(axienet_ior(lp, MRMAC_MODE_REG_0_OFFSET) & MRMAC_CTL_PM_TICK_MASK)) {
+			netdev_warn(ndev,
+			      "MRMAC Tick mode not enabled, not stats available\n");
+			return;
+		}
+
+		/* clear ready, trigger register snapshot, wait for ready */
+		axienet_iow(lp, MRMAC_STAT_STATISTICS_READY_0_OFFSET, 0x03);
+		axienet_iow(lp, MRMAC_TICK_REG_0_OFFSET, 0x1);
+		while(axienet_ior(lp, MRMAC_STAT_STATISTICS_READY_0_OFFSET) != 0x03);
+
+		switch(lp->gt_lane)
+		{
+
+		case 0: // lane 0
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_0_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_0_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_0_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_0_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_0_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_0_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_0_OFFSET;
+		     j < MRMAC_STAT_TX_PACKET_SMALL_0_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_0_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_0_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_UNICAST_0_OFFSET;
+		     j < MRMAC_STAT_TX_USER_PAUSE_0_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_TX_TSN_PREEMPTED_PKT_0_OFFSET;
+		     j < MRMAC_STAT_TX_ECC_ERR1_0_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_CYCLE_COUNT_0_OFFSET;
+		     j < MRMAC_STAT_RX_FRAMING_ERR_0_19_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_BAD_CODE_0_OFFSET;
+		     j < MRMAC_STAT_RX_ECC_ERR1_0_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+		break;
+
+		case 1: // lane 1
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_1_OFFSET;
+		     j < MRMAC_STAT_TX_PACKET_SMALL_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_UNICAST_1_OFFSET;
+		     j < MRMAC_STAT_TX_USER_PAUSE_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_TX_TSN_PREEMPTED_PKT_1_OFFSET;
+		     j < MRMAC_STAT_TX_ECC_ERR1_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_CYCLE_COUNT_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_CYCLE_COUNT_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FRAMING_ERR_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FRAMING_ERR_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_RX_BAD_CODE_1_OFFSET;
+		     j < MRMAC_STAT_RX_FEC_CW_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_CORRECTED_CW_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_CORRECTED_CW_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_UNCORRECTED_CW_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_UNCORRECTED_CW_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_ERR_COUNT_1_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_ERR_COUNT_1_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_RX_TOTAL_PACKETS_1_OFFSET;
+		     j < MRMAC_STAT_RX_ECC_ERR1_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+		break;
+
+		case 2: // lane 2
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_2_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_2_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_2_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_2_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_2_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_2_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_2_OFFSET;
+		     j < MRMAC_STAT_TX_PACKET_SMALL_2_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_2_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_2_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_UNICAST_2_OFFSET;
+		     j < MRMAC_STAT_TX_USER_PAUSE_2_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_TX_TSN_PREEMPTED_PKT_2_OFFSET;
+		     j < MRMAC_STAT_TX_ECC_ERR1_2_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_CYCLE_COUNT_2_OFFSET;
+		     j < MRMAC_STAT_RX_BIP_ERR_2_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_FRAMING_ERR_2_0_OFFSET;
+		     j < MRMAC_STAT_RX_FRAMING_ERR_2_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_BAD_CODE_2_OFFSET;
+		     j < MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_2_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_2_0_OFFSET;
+		     j < MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_2_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_FEC_ERR_COUNT_2_0_OFFSET;
+		     j < MRMAC_STAT_RX_FEC_ERR_COUNT_2_1_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_RX_TOTAL_PACKETS_2_OFFSET;
+		     j < MRMAC_STAT_RX_ECC_ERR1_2_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+		break;
+
+		case 3: // lane 3
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_CYCLE_COUNT_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_FRAME_ERROR_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_TOTAL_PACKETS_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_TOTAL_GOOD_PACKETS_3_OFFSET;
+		     j < MRMAC_STAT_TX_PACKET_SMALL_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_TX_BAD_FCS_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_TX_UNICAST_3_OFFSET;
+		     j < MRMAC_STAT_TX_USER_PAUSE_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		for (j = MRMAC_STAT_TX_TSN_PREEMPTED_PKT_3_OFFSET;
+		     j < MRMAC_STAT_TX_ECC_ERR1_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_CYCLE_COUNT_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_CYCLE_COUNT_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FRAMING_ERR_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FRAMING_ERR_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_RX_BAD_CODE_3_OFFSET;
+		     j < MRMAC_STAT_RX_FEC_CW_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_CORRECTED_CW_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_CORRECTED_CW_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_UNCORRECTED_CW_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_UNCORRECTED_CW_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_0TO1_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_BIT_ERR_1TO0_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+		reg.reg[0] = axienet_ior(lp, MRMAC_STAT_RX_FEC_ERR_COUNT_3_OFFSET);
+		reg.reg[1] = axienet_ior(lp, MRMAC_STAT_RX_FEC_ERR_COUNT_3_OFFSET + sizeof(u32));
+		data[i++] = reg.stat_reg;
+
+		for (j = MRMAC_STAT_RX_TOTAL_PACKETS_3_OFFSET;
+		     j < MRMAC_STAT_RX_ECC_ERR1_3_OFFSET + sizeof(u32);
+		     j += sizeof(u64))
+		{
+			reg.reg[0] = axienet_ior(lp, j);
+			reg.reg[1] = axienet_ior(lp, j + sizeof(u32));
+			data[i++] = reg.stat_reg;
+		}
+		break;
+
+		default: // bad lane
+			netdev_err(ndev,
+			      "bad lane:%d\n", lp->gt_lane);
+		}; // end swith
+
+	} else {
+		data[i++] = ndev->stats.tx_packets;
+		data[i++] = ndev->stats.rx_packets;
+		data[i++] = ndev->stats.tx_bytes;
+		data[i++] = ndev->stats.rx_bytes;
+		data[i++] = ndev->stats.tx_errors;
+		data[i++] = ndev->stats.rx_missed_errors + ndev->stats.rx_frame_errors;
+	}
 
 #ifdef CONFIG_AXIENET_HAS_MCDMA
 	axienet_get_stats(ndev, stats, data);
@@ -2779,12 +4221,24 @@ void axienet_ethtools_get_stats(struct net_device *ndev,
 void axienet_ethtools_strings(struct net_device *ndev, u32 sset, u8 *data)
 {
 	int i;
+	struct axienet_local *lp = netdev_priv(ndev);
 
-	for (i = 0; i < AXIENET_ETHTOOLS_SSTATS_LEN; i++) {
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
+
+		for (i = 0; i < mrmac_sstat[lp->gt_lane].sz; i++) {
+		if (sset == ETH_SS_STATS)
+			memcpy(data + i * ETH_GSTRING_LEN,
+				mrmac_sstat[lp->gt_lane].st[i].name,
+				ETH_GSTRING_LEN);
+		}
+	} else {
+		for (i = 0; i < AXIENET_ETHTOOLS_SSTATS_LEN; i++) {
 		if (sset == ETH_SS_STATS)
 			memcpy(data + i * ETH_GSTRING_LEN,
 			       axienet_get_ethtools_strings_stats[i].name,
 			       ETH_GSTRING_LEN);
+		}
+
 	}
 #ifdef CONFIG_AXIENET_HAS_MCDMA
 	axienet_strings(ndev, sset, data);
@@ -3514,6 +4968,15 @@ static int axienet_probe(struct platform_device *pdev)
 		}
 	}
 
+	// hack for testing the MTU on MRMAC
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
+
+		/* MTU range: 64 - 9600 */
+		ndev->min_mtu = 64;
+		ndev->max_mtu = 9600;
+		ndev->mtu = 9600;
+	};
+
 	ret = of_property_read_u32(pdev->dev.of_node, "xlnx,txcsum", &value);
 	if (!ret) {
 		dev_info(&pdev->dev, "TX_CSUM %d\n", value);

