From fdcffb9097068e0c9507afa2c2e13530edda73a7 Mon Sep 17 00:00:00 2001
From: Sarath Babu Naidu Gaddam <sarath.babu.naidu.gaddam@xilinx.com>
Date: Mon, 12 Apr 2021 01:52:32 -0600
Subject: [PATCH 1/7] net: xilinx: axienet: MRMAC PTP Rx enhancement

Timestamp is always provided by MRMAC. New HW design logic prefixes
timestamp values to data stream and only updates the qualifier bit
for L2 PTP and UDP IPV4 PTP packets.

Updated SW driver to make support this mechanism to extract SW timestamp
and discard the prefix 16 bytes for non-PTP packets before passing
information to higher layers as usual.

Signed-off-by: Sarath Babu Naidu Gaddam <sarath.babu.naidu.gaddam@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c | 53 ++++++++++++++++++-----
 1 file changed, 43 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 256c4f0..928cb0b 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -71,6 +71,8 @@
 #define NS_PER_SEC              1000000000ULL /* Nanoseconds per second */
 
 #define MRMAC_RESET_DELAY	1 /* Delay in msecs*/
+#define TSTAMP_LEN		16
+#define QUALIFIER		BIT(31)
 
 /* IEEE1588 Message Type field values  */
 #define PTP_TYPE_SYNC		0
@@ -627,7 +629,13 @@ static int axienet_device_reset(struct net_device *ndev)
 		__axienet_device_reset(q);
 	}
 
-	lp->max_frm_size = XAE_MAX_VLAN_FRAME_SIZE;
+	/*Accommodate 16 byte TS header prefixed in datastream for MRMAC */
+	if (lp->axienet_config->mactype == XAXIENET_MRMAC)
+		lp->max_frm_size = XAE_MAX_VLAN_FRAME_SIZE + TSTAMP_LEN;
+	else
+		lp->max_frm_size = XAE_MAX_VLAN_FRAME_SIZE;
+
+
 	if (lp->axienet_config->mactype != XAXIENET_10G_25G &&
 	    lp->axienet_config->mactype != XAXIENET_1G_10G_25G &&
 	    lp->axienet_config->mactype != XAXIENET_MRMAC) {
@@ -635,9 +643,14 @@ static int axienet_device_reset(struct net_device *ndev)
 		lp->options &= (~XAE_OPTION_JUMBO);
 	}
 
-	if (ndev->mtu > XAE_MTU && ndev->mtu <= XAE_JUMBO_MTU) {
-		lp->max_frm_size = ndev->mtu + VLAN_ETH_HLEN +
-					XAE_TRL_SIZE;
+	if ((ndev->mtu > XAE_MTU) && (ndev->mtu <= XAE_JUMBO_MTU)) {
+		/*Accommodate 16 byte TS header prefixed in datastream for MRMAC */
+		if (lp->axienet_config->mactype == XAXIENET_MRMAC)
+			lp->max_frm_size = ndev->mtu + VLAN_ETH_HLEN +
+						XAE_TRL_SIZE + TSTAMP_LEN;
+		else
+			lp->max_frm_size = ndev->mtu + VLAN_ETH_HLEN +
+						XAE_TRL_SIZE;
 		if (lp->max_frm_size <= lp->rxmem &&
 		    lp->axienet_config->mactype != XAXIENET_10G_25G &&
 		    lp->axienet_config->mactype != XAXIENET_1G_10G_25G &&
@@ -1513,15 +1526,15 @@ static int axienet_recv(struct net_device *ndev, int budget,
 
 #ifdef CONFIG_XILINX_AXI_EMAC_HWTSTAMP
 			if ((lp->tstamp_config.rx_filter == HWTSTAMP_FILTER_ALL ||
-			     lp->eth_hasptp) &&
-			    lp->axienet_config->mactype != XAXIENET_10G_25G &&
-			    lp->axienet_config->mactype != XAXIENET_MRMAC) {
+						lp->eth_hasptp) &&
+					lp->axienet_config->mactype != XAXIENET_10G_25G &&
+					lp->axienet_config->mactype != XAXIENET_MRMAC) {
 				u32 sec, nsec;
 				u64 time64;
 				struct skb_shared_hwtstamps *shhwtstamps;
 
 				if (lp->axienet_config->mactype == XAXIENET_1G ||
-				    lp->axienet_config->mactype == XAXIENET_2_5G) {
+						lp->axienet_config->mactype == XAXIENET_2_5G) {
 					/* The first 8 bytes will be the timestamp */
 					memcpy(&sec, &skb->data[0], 4);
 					memcpy(&nsec, &skb->data[4], 4);
@@ -1539,9 +1552,29 @@ static int axienet_recv(struct net_device *ndev, int budget,
 				time64 = sec * NS_PER_SEC + nsec;
 				shhwtstamps = skb_hwtstamps(skb);
 				shhwtstamps->hwtstamp = ns_to_ktime(time64);
-			} else if (lp->axienet_config->mactype == XAXIENET_10G_25G ||
-				   lp->axienet_config->mactype == XAXIENET_MRMAC) {
+			} else if (lp->axienet_config->mactype == XAXIENET_10G_25G) {
 				axienet_rx_hwtstamp(lp, skb);
+			} else if (lp->axienet_config->mactype == XAXIENET_MRMAC) {
+				u32 sec, nsec, sech;
+				u64 time64;
+				struct skb_shared_hwtstamps *shhwtstamps;
+
+				/* [31]:Qual bit; [15:0]: Resvd; [16:0]: TS[79:64] */
+				memcpy(&sech, &skb->data[8], 4);
+
+				if (sech & QUALIFIER) {
+					/* 80 bit timestamp */
+					memcpy(&nsec, &skb->data[0], 4);
+					memcpy(&sec, &skb->data[4], 4);
+				}
+
+				skb_pull(skb, 16);
+
+				if (sech & QUALIFIER) {
+					time64 = sec * NS_PER_SEC + nsec;
+					shhwtstamps = skb_hwtstamps(skb);
+					shhwtstamps->hwtstamp = ns_to_ktime(time64);
+				}
 			}
 #endif
 			skb->protocol = eth_type_trans(skb, ndev);
-- 
2.7.4

